{"ast":null,"code":"import _objectSpread from\"C:\\\\Users\\\\huachuan\\\\Desktop\\\\uniswap-front-interface\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";import{parseBytes32String}from'@ethersproject/strings';import{ETHER,Token,currencyEquals}from'@uniswap/sdk';import{useMemo}from'react';import{useSelectedTokenList}from'../state/lists/hooks';import{NEVER_RELOAD,useSingleCallResult}from'../state/multicall/hooks';import{useUserAddedTokens}from'../state/user/hooks';import{isAddress}from'../utils';import{useActiveWeb3React}from'./index';import{useBytes32TokenContract,useTokenContract}from'./useContract';export function useAllTokens(){var _useActiveWeb3React=useActiveWeb3React(),chainId=_useActiveWeb3React.chainId;var userAddedTokens=useUserAddedTokens();var allTokens=useSelectedTokenList();return useMemo(function(){if(!chainId)return{};return userAddedTokens// reduce into all ALL_TOKENS filtered by the current chain\n.reduce(function(tokenMap,token){tokenMap[token.address]=token;return tokenMap;},// must make a copy because reduce modifies the map, and we do not\n// want to make a copy in every iteration\n_objectSpread({},allTokens[chainId]));},[chainId,userAddedTokens,allTokens]);}// Check if currency is included in custom list from user storage\nexport function useIsUserAddedToken(currency){var userAddedTokens=useUserAddedTokens();return!!userAddedTokens.find(function(token){return currencyEquals(currency,token);});}// parse a name or symbol from a token response\nvar BYTES32_REGEX=/^0x[a-fA-F0-9]{64}$/;function parseStringOrBytes32(str,bytes32,defaultValue){return str&&str.length>0?str:bytes32&&BYTES32_REGEX.test(bytes32)?parseBytes32String(bytes32):defaultValue;}// undefined if invalid or does not exist\n// null if loading\n// otherwise returns the token\nexport function useToken(tokenAddress){var _useActiveWeb3React2=useActiveWeb3React(),chainId=_useActiveWeb3React2.chainId;var tokens=useAllTokens();var address=isAddress(tokenAddress);var tokenContract=useTokenContract(address?address:undefined,false);var tokenContractBytes32=useBytes32TokenContract(address?address:undefined,false);var token=address?tokens[address]:undefined;var tokenName=useSingleCallResult(token?undefined:tokenContract,'name',undefined,NEVER_RELOAD);var tokenNameBytes32=useSingleCallResult(token?undefined:tokenContractBytes32,'name',undefined,NEVER_RELOAD);var symbol=useSingleCallResult(token?undefined:tokenContract,'symbol',undefined,NEVER_RELOAD);var symbolBytes32=useSingleCallResult(token?undefined:tokenContractBytes32,'symbol',undefined,NEVER_RELOAD);var decimals=useSingleCallResult(token?undefined:tokenContract,'decimals',undefined,NEVER_RELOAD);return useMemo(function(){if(token)return token;if(!chainId||!address)return undefined;if(decimals.loading||symbol.loading||tokenName.loading)return null;if(decimals.result){var _symbol$result,_symbolBytes32$result,_tokenName$result,_tokenNameBytes32$res;return new Token(chainId,address,decimals.result[0],parseStringOrBytes32((_symbol$result=symbol.result)===null||_symbol$result===void 0?void 0:_symbol$result[0],(_symbolBytes32$result=symbolBytes32.result)===null||_symbolBytes32$result===void 0?void 0:_symbolBytes32$result[0],'UNKNOWN'),parseStringOrBytes32((_tokenName$result=tokenName.result)===null||_tokenName$result===void 0?void 0:_tokenName$result[0],(_tokenNameBytes32$res=tokenNameBytes32.result)===null||_tokenNameBytes32$res===void 0?void 0:_tokenNameBytes32$res[0],'Unknown Token'));}return undefined;},[address,chainId,decimals.loading,decimals.result,symbol.loading,symbol.result,symbolBytes32.result,token,tokenName.loading,tokenName.result,tokenNameBytes32.result]);}export function useCurrency(currencyId){var isETH=(currencyId===null||currencyId===void 0?void 0:currencyId.toUpperCase())==='ETH';var token=useToken(isETH?undefined:currencyId);return isETH?ETHER:token;}","map":{"version":3,"sources":["C:/Users/huachuan/Desktop/uniswap-front-interface/src/hooks/Tokens.ts"],"names":["parseBytes32String","ETHER","Token","currencyEquals","useMemo","useSelectedTokenList","NEVER_RELOAD","useSingleCallResult","useUserAddedTokens","isAddress","useActiveWeb3React","useBytes32TokenContract","useTokenContract","useAllTokens","chainId","userAddedTokens","allTokens","reduce","tokenMap","token","address","useIsUserAddedToken","currency","find","BYTES32_REGEX","parseStringOrBytes32","str","bytes32","defaultValue","length","test","useToken","tokenAddress","tokens","tokenContract","undefined","tokenContractBytes32","tokenName","tokenNameBytes32","symbol","symbolBytes32","decimals","loading","result","useCurrency","currencyId","isETH","toUpperCase"],"mappings":"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","sourcesContent":["import { parseBytes32String } from '@ethersproject/strings'\nimport { Currency, ETHER, Token, currencyEquals } from '@uniswap/sdk'\nimport { useMemo } from 'react'\nimport { useSelectedTokenList } from '../state/lists/hooks'\nimport { NEVER_RELOAD, useSingleCallResult } from '../state/multicall/hooks'\nimport { useUserAddedTokens } from '../state/user/hooks'\nimport { isAddress } from '../utils'\n\nimport { useActiveWeb3React } from './index'\nimport { useBytes32TokenContract, useTokenContract } from './useContract'\n\nexport function useAllTokens(): { [address: string]: Token } {\n  const { chainId } = useActiveWeb3React()\n  const userAddedTokens = useUserAddedTokens()\n  const allTokens = useSelectedTokenList()\n\n  return useMemo(() => {\n    if (!chainId) return {}\n    return (\n      userAddedTokens\n        // reduce into all ALL_TOKENS filtered by the current chain\n        .reduce<{ [address: string]: Token }>(\n          (tokenMap, token) => {\n            tokenMap[token.address] = token\n            return tokenMap\n          },\n          // must make a copy because reduce modifies the map, and we do not\n          // want to make a copy in every iteration\n          { ...allTokens[chainId] }\n        )\n    )\n  }, [chainId, userAddedTokens, allTokens])\n}\n\n// Check if currency is included in custom list from user storage\nexport function useIsUserAddedToken(currency: Currency): boolean {\n  const userAddedTokens = useUserAddedTokens()\n  return !!userAddedTokens.find(token => currencyEquals(currency, token))\n}\n\n// parse a name or symbol from a token response\nconst BYTES32_REGEX = /^0x[a-fA-F0-9]{64}$/\nfunction parseStringOrBytes32(str: string | undefined, bytes32: string | undefined, defaultValue: string): string {\n  return str && str.length > 0\n    ? str\n    : bytes32 && BYTES32_REGEX.test(bytes32)\n    ? parseBytes32String(bytes32)\n    : defaultValue\n}\n\n// undefined if invalid or does not exist\n// null if loading\n// otherwise returns the token\nexport function useToken(tokenAddress?: string): Token | undefined | null {\n  const { chainId } = useActiveWeb3React()\n  const tokens = useAllTokens()\n\n  const address = isAddress(tokenAddress)\n\n  const tokenContract = useTokenContract(address ? address : undefined, false)\n  const tokenContractBytes32 = useBytes32TokenContract(address ? address : undefined, false)\n  const token: Token | undefined = address ? tokens[address] : undefined\n\n  const tokenName = useSingleCallResult(token ? undefined : tokenContract, 'name', undefined, NEVER_RELOAD)\n  const tokenNameBytes32 = useSingleCallResult(\n    token ? undefined : tokenContractBytes32,\n    'name',\n    undefined,\n    NEVER_RELOAD\n  )\n  const symbol = useSingleCallResult(token ? undefined : tokenContract, 'symbol', undefined, NEVER_RELOAD)\n  const symbolBytes32 = useSingleCallResult(token ? undefined : tokenContractBytes32, 'symbol', undefined, NEVER_RELOAD)\n  const decimals = useSingleCallResult(token ? undefined : tokenContract, 'decimals', undefined, NEVER_RELOAD)\n\n  return useMemo(() => {\n    if (token) return token\n    if (!chainId || !address) return undefined\n    if (decimals.loading || symbol.loading || tokenName.loading) return null\n    if (decimals.result) {\n      return new Token(\n        chainId,\n        address,\n        decimals.result[0],\n        parseStringOrBytes32(symbol.result?.[0], symbolBytes32.result?.[0], 'UNKNOWN'),\n        parseStringOrBytes32(tokenName.result?.[0], tokenNameBytes32.result?.[0], 'Unknown Token')\n      )\n    }\n    return undefined\n  }, [\n    address,\n    chainId,\n    decimals.loading,\n    decimals.result,\n    symbol.loading,\n    symbol.result,\n    symbolBytes32.result,\n    token,\n    tokenName.loading,\n    tokenName.result,\n    tokenNameBytes32.result\n  ])\n}\n\nexport function useCurrency(currencyId: string | undefined): Currency | null | undefined {\n  const isETH = currencyId?.toUpperCase() === 'ETH'\n  const token = useToken(isETH ? undefined : currencyId)\n  return isETH ? ETHER : token\n}\n"]},"metadata":{},"sourceType":"module"}