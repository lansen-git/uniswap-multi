{"ast":null,"code":"import JSBI from 'jsbi';\nexport { default as JSBI } from 'jsbi';\nimport invariant from 'tiny-invariant';\nimport warning from 'tiny-warning';\nimport { getAddress, getCreate2Address } from '@ethersproject/address';\nimport _Big from 'big.js';\nimport toFormat from 'toformat';\nimport _Decimal from 'decimal.js-light';\nimport { keccak256, pack } from '@ethersproject/solidity';\nimport { Contract } from '@ethersproject/contracts';\nimport { getNetwork } from '@ethersproject/networks';\nimport { getDefaultProvider } from '@ethersproject/providers';\nimport IUniswapV2Pair from '@uniswap/v2-core/build/IUniswapV2Pair.json';\n\nvar _SOLIDITY_TYPE_MAXIMA;\n\nvar ChainId;\n\n(function (ChainId) {\n  ChainId[ChainId[\"MAINNET\"] = 1] = \"MAINNET\";\n  ChainId[ChainId[\"ROPSTEN\"] = 3] = \"ROPSTEN\";\n  ChainId[ChainId[\"RINKEBY\"] = 4] = \"RINKEBY\";\n  ChainId[ChainId[\"G\\xD6RLI\"] = 5] = \"G\\xD6RLI\";\n  ChainId[ChainId[\"KOVAN\"] = 42] = \"KOVAN\";\n  ChainId[ChainId[\"HECO\"] = 128] = \"HECO\";\n})(ChainId || (ChainId = {}));\n\nvar TradeType;\n\n(function (TradeType) {\n  TradeType[TradeType[\"EXACT_INPUT\"] = 0] = \"EXACT_INPUT\";\n  TradeType[TradeType[\"EXACT_OUTPUT\"] = 1] = \"EXACT_OUTPUT\";\n})(TradeType || (TradeType = {}));\n\nvar Rounding;\n\n(function (Rounding) {\n  Rounding[Rounding[\"ROUND_DOWN\"] = 0] = \"ROUND_DOWN\";\n  Rounding[Rounding[\"ROUND_HALF_UP\"] = 1] = \"ROUND_HALF_UP\";\n  Rounding[Rounding[\"ROUND_UP\"] = 2] = \"ROUND_UP\";\n})(Rounding || (Rounding = {}));\n\nvar FACTORY_ADDRESS = '0x527ebd73a64b96100b7aae6bdde4b876947d370b';\nvar INIT_CODE_HASH = 'b0369ccfee4b3a363e7c2dc0c57e14420a950794a06924293fa8ec3b369bea39';\nvar MINIMUM_LIQUIDITY = /*#__PURE__*/JSBI.BigInt(1000); // exports for internal consumption\n\nvar ZERO = /*#__PURE__*/JSBI.BigInt(0);\nvar ONE = /*#__PURE__*/JSBI.BigInt(1);\nvar TWO = /*#__PURE__*/JSBI.BigInt(2);\nvar THREE = /*#__PURE__*/JSBI.BigInt(3);\nvar FIVE = /*#__PURE__*/JSBI.BigInt(5);\nvar TEN = /*#__PURE__*/JSBI.BigInt(10);\n\nvar _100 = /*#__PURE__*/JSBI.BigInt(100);\n\nvar _997 = /*#__PURE__*/JSBI.BigInt(997);\n\nvar _1000 = /*#__PURE__*/JSBI.BigInt(1000);\n\nvar SolidityType;\n\n(function (SolidityType) {\n  SolidityType[\"uint8\"] = \"uint8\";\n  SolidityType[\"uint256\"] = \"uint256\";\n})(SolidityType || (SolidityType = {}));\n\nvar SOLIDITY_TYPE_MAXIMA = (_SOLIDITY_TYPE_MAXIMA = {}, _SOLIDITY_TYPE_MAXIMA[SolidityType.uint8] = /*#__PURE__*/JSBI.BigInt('0xff'), _SOLIDITY_TYPE_MAXIMA[SolidityType.uint256] = /*#__PURE__*/JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'), _SOLIDITY_TYPE_MAXIMA);\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _construct(Parent, args, Class) {\n  if (_isNativeReflectConstruct()) {\n    _construct = Reflect.construct;\n  } else {\n    _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) _setPrototypeOf(instance, Class.prototype);\n      return instance;\n    };\n  }\n\n  return _construct.apply(null, arguments);\n}\n\nfunction _isNativeFunction(fn) {\n  return Function.toString.call(fn).indexOf(\"[native code]\") !== -1;\n}\n\nfunction _wrapNativeSuper(Class) {\n  var _cache = typeof Map === \"function\" ? new Map() : undefined;\n\n  _wrapNativeSuper = function _wrapNativeSuper(Class) {\n    if (Class === null || !_isNativeFunction(Class)) return Class;\n\n    if (typeof Class !== \"function\") {\n      throw new TypeError(\"Super expression must either be null or a function\");\n    }\n\n    if (typeof _cache !== \"undefined\") {\n      if (_cache.has(Class)) return _cache.get(Class);\n\n      _cache.set(Class, Wrapper);\n    }\n\n    function Wrapper() {\n      return _construct(Class, arguments, _getPrototypeOf(this).constructor);\n    }\n\n    Wrapper.prototype = Object.create(Class.prototype, {\n      constructor: {\n        value: Wrapper,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    return _setPrototypeOf(Wrapper, Class);\n  };\n\n  return _wrapNativeSuper(Class);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n  return arr2;\n}\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n      return function () {\n        if (i >= o.length) return {\n          done: true\n        };\n        return {\n          done: false,\n          value: o[i++]\n        };\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  it = o[Symbol.iterator]();\n  return it.next.bind(it);\n} // see https://stackoverflow.com/a/41102306\n\n\nvar CAN_SET_PROTOTYPE = ('setPrototypeOf' in Object);\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\n\nvar InsufficientReservesError = /*#__PURE__*/function (_Error) {\n  _inheritsLoose(InsufficientReservesError, _Error);\n\n  function InsufficientReservesError() {\n    var _this;\n\n    _this = _Error.call(this) || this;\n    _this.isInsufficientReservesError = true;\n    _this.name = _this.constructor.name;\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(_assertThisInitialized(_this), (this instanceof InsufficientReservesError ? this.constructor : void 0).prototype);\n    return _this;\n  }\n\n  return InsufficientReservesError;\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\n\n\nvar InsufficientInputAmountError = /*#__PURE__*/function (_Error2) {\n  _inheritsLoose(InsufficientInputAmountError, _Error2);\n\n  function InsufficientInputAmountError() {\n    var _this2;\n\n    _this2 = _Error2.call(this) || this;\n    _this2.isInsufficientInputAmountError = true;\n    _this2.name = _this2.constructor.name;\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(_assertThisInitialized(_this2), (this instanceof InsufficientInputAmountError ? this.constructor : void 0).prototype);\n    return _this2;\n  }\n\n  return InsufficientInputAmountError;\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n\nfunction validateSolidityTypeInstance(value, solidityType) {\n  !JSBI.greaterThanOrEqual(value, ZERO) ? process.env.NODE_ENV !== \"production\" ? invariant(false, value + \" is not a \" + solidityType + \".\") : invariant(false) : void 0;\n  !JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]) ? process.env.NODE_ENV !== \"production\" ? invariant(false, value + \" is not a \" + solidityType + \".\") : invariant(false) : void 0;\n} // warns if addresses are not checksummed\n\n\nfunction validateAndParseAddress(address) {\n  try {\n    var checksummedAddress = getAddress(address);\n    process.env.NODE_ENV !== \"production\" ? warning(address === checksummedAddress, address + \" is not checksummed.\") : void 0;\n    return checksummedAddress;\n  } catch (error) {\n    process.env.NODE_ENV !== \"production\" ? invariant(false, address + \" is not a valid address.\") : invariant(false);\n  }\n}\n\nfunction parseBigintIsh(bigintIsh) {\n  return bigintIsh instanceof JSBI ? bigintIsh : typeof bigintIsh === 'bigint' ? JSBI.BigInt(bigintIsh.toString()) : JSBI.BigInt(bigintIsh);\n} // mock the on-chain sqrt function\n\n\nfunction sqrt(y) {\n  validateSolidityTypeInstance(y, SolidityType.uint256);\n  var z = ZERO;\n  var x;\n\n  if (JSBI.greaterThan(y, THREE)) {\n    z = y;\n    x = JSBI.add(JSBI.divide(y, TWO), ONE);\n\n    while (JSBI.lessThan(x, z)) {\n      z = x;\n      x = JSBI.divide(JSBI.add(JSBI.divide(y, x), x), TWO);\n    }\n  } else if (JSBI.notEqual(y, ZERO)) {\n    z = ONE;\n  }\n\n  return z;\n} // given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\n\n\nfunction sortedInsert(items, add, maxSize, comparator) {\n  !(maxSize > 0) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'MAX_SIZE_ZERO') : invariant(false) : void 0; // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n\n  !(items.length <= maxSize) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'ITEMS_SIZE') : invariant(false) : void 0; // short circuit first item add\n\n  if (items.length === 0) {\n    items.push(add);\n    return null;\n  } else {\n    var isFull = items.length === maxSize; // short circuit if full and the additional item does not come before the last item\n\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add;\n    }\n\n    var lo = 0,\n        hi = items.length;\n\n    while (lo < hi) {\n      var mid = lo + hi >>> 1;\n\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1;\n      } else {\n        hi = mid;\n      }\n    }\n\n    items.splice(lo, 0, add);\n    return isFull ? items.pop() : null;\n  }\n}\n/**\n * A currency is any fungible financial instrument on Ethereum, including Ether and all ERC20 tokens.\n *\n * The only instance of the base class `Currency` is Ether.\n */\n\n\nvar Currency =\n/**\n * Constructs an instance of the base class `Currency`. The only instance of the base class `Currency` is `Currency.ETHER`.\n * @param decimals decimals of the currency\n * @param symbol symbol of the currency\n * @param name of the currency\n */\nfunction Currency(decimals, symbol, name) {\n  validateSolidityTypeInstance(JSBI.BigInt(decimals), SolidityType.uint8);\n  this.decimals = decimals;\n  this.symbol = symbol;\n  this.name = name;\n};\n/**\n * The only instance of the base class `Currency`.\n */\n\n\nCurrency.ETHER = /*#__PURE__*/new Currency(18, 'ETH', 'Ether');\nvar ETHER = Currency.ETHER;\n\nvar _WETH;\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\n\n\nvar Token = /*#__PURE__*/function (_Currency) {\n  _inheritsLoose(Token, _Currency);\n\n  function Token(chainId, address, decimals, symbol, name) {\n    var _this;\n\n    _this = _Currency.call(this, decimals, symbol, name) || this;\n    _this.chainId = chainId;\n    _this.address = validateAndParseAddress(address);\n    return _this;\n  }\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n\n\n  var _proto = Token.prototype;\n\n  _proto.equals = function equals(other) {\n    // short circuit on reference equality\n    if (this === other) {\n      return true;\n    }\n\n    return this.chainId === other.chainId && this.address === other.address;\n  }\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  ;\n\n  _proto.sortsBefore = function sortsBefore(other) {\n    !(this.chainId === other.chainId) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'CHAIN_IDS') : invariant(false) : void 0;\n    !(this.address !== other.address) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'ADDRESSES') : invariant(false) : void 0;\n    return this.address.toLowerCase() < other.address.toLowerCase();\n  };\n\n  return Token;\n}(Currency);\n/**\n * Compares two currencies for equality\n */\n\n\nfunction currencyEquals(currencyA, currencyB) {\n  if (currencyA instanceof Token && currencyB instanceof Token) {\n    return currencyA.equals(currencyB);\n  } else if (currencyA instanceof Token) {\n    return false;\n  } else if (currencyB instanceof Token) {\n    return false;\n  } else {\n    return currencyA === currencyB;\n  }\n}\n\nvar WETH = (_WETH = {}, _WETH[ChainId.MAINNET] = /*#__PURE__*/new Token(ChainId.MAINNET, '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2', 18, 'WETH', 'Wrapped Ether'), _WETH[ChainId.ROPSTEN] = /*#__PURE__*/new Token(ChainId.ROPSTEN, '0xc778417E063141139Fce010982780140Aa0cD5Ab', 18, 'WETH', 'Wrapped Ether'), _WETH[ChainId.RINKEBY] = /*#__PURE__*/new Token(ChainId.RINKEBY, '0xc778417E063141139Fce010982780140Aa0cD5Ab', 18, 'WETH', 'Wrapped Ether'), _WETH[ChainId.GÖRLI] = /*#__PURE__*/new Token(ChainId.GÖRLI, '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6', 18, 'WETH', 'Wrapped Ether'), _WETH[ChainId.KOVAN] = /*#__PURE__*/new Token(ChainId.KOVAN, '0xd0A1E359811322d97991E03f863a0C30C2cF029C', 18, 'WETH', 'Wrapped Ether'), _WETH);\n\nvar _toSignificantRoundin, _toFixedRounding;\n\nvar Decimal = /*#__PURE__*/toFormat(_Decimal);\nvar Big = /*#__PURE__*/toFormat(_Big);\nvar toSignificantRounding = (_toSignificantRoundin = {}, _toSignificantRoundin[Rounding.ROUND_DOWN] = Decimal.ROUND_DOWN, _toSignificantRoundin[Rounding.ROUND_HALF_UP] = Decimal.ROUND_HALF_UP, _toSignificantRoundin[Rounding.ROUND_UP] = Decimal.ROUND_UP, _toSignificantRoundin);\nvar toFixedRounding = (_toFixedRounding = {}, _toFixedRounding[Rounding.ROUND_DOWN] = 0, _toFixedRounding[Rounding.ROUND_HALF_UP] = 1, _toFixedRounding[Rounding.ROUND_UP] = 3, _toFixedRounding);\n\nvar Fraction = /*#__PURE__*/function () {\n  function Fraction(numerator, denominator) {\n    if (denominator === void 0) {\n      denominator = ONE;\n    }\n\n    this.numerator = parseBigintIsh(numerator);\n    this.denominator = parseBigintIsh(denominator);\n  } // performs floor division\n\n\n  var _proto = Fraction.prototype;\n\n  _proto.invert = function invert() {\n    return new Fraction(this.denominator, this.numerator);\n  };\n\n  _proto.add = function add(other) {\n    var otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other));\n\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator);\n    }\n\n    return new Fraction(JSBI.add(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(otherParsed.numerator, this.denominator)), JSBI.multiply(this.denominator, otherParsed.denominator));\n  };\n\n  _proto.subtract = function subtract(other) {\n    var otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other));\n\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator);\n    }\n\n    return new Fraction(JSBI.subtract(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(otherParsed.numerator, this.denominator)), JSBI.multiply(this.denominator, otherParsed.denominator));\n  };\n\n  _proto.lessThan = function lessThan(other) {\n    var otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other));\n    return JSBI.lessThan(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(otherParsed.numerator, this.denominator));\n  };\n\n  _proto.equalTo = function equalTo(other) {\n    var otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other));\n    return JSBI.equal(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(otherParsed.numerator, this.denominator));\n  };\n\n  _proto.greaterThan = function greaterThan(other) {\n    var otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other));\n    return JSBI.greaterThan(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(otherParsed.numerator, this.denominator));\n  };\n\n  _proto.multiply = function multiply(other) {\n    var otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other));\n    return new Fraction(JSBI.multiply(this.numerator, otherParsed.numerator), JSBI.multiply(this.denominator, otherParsed.denominator));\n  };\n\n  _proto.divide = function divide(other) {\n    var otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other));\n    return new Fraction(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(this.denominator, otherParsed.numerator));\n  };\n\n  _proto.toSignificant = function toSignificant(significantDigits, format, rounding) {\n    if (format === void 0) {\n      format = {\n        groupSeparator: ''\n      };\n    }\n\n    if (rounding === void 0) {\n      rounding = Rounding.ROUND_HALF_UP;\n    }\n\n    !Number.isInteger(significantDigits) ? process.env.NODE_ENV !== \"production\" ? invariant(false, significantDigits + \" is not an integer.\") : invariant(false) : void 0;\n    !(significantDigits > 0) ? process.env.NODE_ENV !== \"production\" ? invariant(false, significantDigits + \" is not positive.\") : invariant(false) : void 0;\n    Decimal.set({\n      precision: significantDigits + 1,\n      rounding: toSignificantRounding[rounding]\n    });\n    var quotient = new Decimal(this.numerator.toString()).div(this.denominator.toString()).toSignificantDigits(significantDigits);\n    return quotient.toFormat(quotient.decimalPlaces(), format);\n  };\n\n  _proto.toFixed = function toFixed(decimalPlaces, format, rounding) {\n    if (format === void 0) {\n      format = {\n        groupSeparator: ''\n      };\n    }\n\n    if (rounding === void 0) {\n      rounding = Rounding.ROUND_HALF_UP;\n    }\n\n    !Number.isInteger(decimalPlaces) ? process.env.NODE_ENV !== \"production\" ? invariant(false, decimalPlaces + \" is not an integer.\") : invariant(false) : void 0;\n    !(decimalPlaces >= 0) ? process.env.NODE_ENV !== \"production\" ? invariant(false, decimalPlaces + \" is negative.\") : invariant(false) : void 0;\n    Big.DP = decimalPlaces;\n    Big.RM = toFixedRounding[rounding];\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format);\n  };\n\n  _createClass(Fraction, [{\n    key: \"quotient\",\n    get: function get() {\n      return JSBI.divide(this.numerator, this.denominator);\n    } // remainder after floor division\n\n  }, {\n    key: \"remainder\",\n    get: function get() {\n      return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator);\n    }\n  }]);\n\n  return Fraction;\n}();\n\nvar Big$1 = /*#__PURE__*/toFormat(_Big);\n\nvar CurrencyAmount = /*#__PURE__*/function (_Fraction) {\n  _inheritsLoose(CurrencyAmount, _Fraction); // amount _must_ be raw, i.e. in the native representation\n\n\n  function CurrencyAmount(currency, amount) {\n    var _this;\n\n    var parsedAmount = parseBigintIsh(amount);\n    validateSolidityTypeInstance(parsedAmount, SolidityType.uint256);\n    _this = _Fraction.call(this, parsedAmount, JSBI.exponentiate(TEN, JSBI.BigInt(currency.decimals))) || this;\n    _this.currency = currency;\n    return _this;\n  }\n  /**\n   * Helper that calls the constructor with the ETHER currency\n   * @param amount ether amount in wei\n   */\n\n\n  CurrencyAmount.ether = function ether(amount) {\n    return new CurrencyAmount(ETHER, amount);\n  };\n\n  var _proto = CurrencyAmount.prototype;\n\n  _proto.add = function add(other) {\n    !currencyEquals(this.currency, other.currency) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'TOKEN') : invariant(false) : void 0;\n    return new CurrencyAmount(this.currency, JSBI.add(this.raw, other.raw));\n  };\n\n  _proto.subtract = function subtract(other) {\n    !currencyEquals(this.currency, other.currency) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'TOKEN') : invariant(false) : void 0;\n    return new CurrencyAmount(this.currency, JSBI.subtract(this.raw, other.raw));\n  };\n\n  _proto.toSignificant = function toSignificant(significantDigits, format, rounding) {\n    if (significantDigits === void 0) {\n      significantDigits = 6;\n    }\n\n    if (rounding === void 0) {\n      rounding = Rounding.ROUND_DOWN;\n    }\n\n    return _Fraction.prototype.toSignificant.call(this, significantDigits, format, rounding);\n  };\n\n  _proto.toFixed = function toFixed(decimalPlaces, format, rounding) {\n    if (decimalPlaces === void 0) {\n      decimalPlaces = this.currency.decimals;\n    }\n\n    if (rounding === void 0) {\n      rounding = Rounding.ROUND_DOWN;\n    }\n\n    !(decimalPlaces <= this.currency.decimals) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'DECIMALS') : invariant(false) : void 0;\n    return _Fraction.prototype.toFixed.call(this, decimalPlaces, format, rounding);\n  };\n\n  _proto.toExact = function toExact(format) {\n    if (format === void 0) {\n      format = {\n        groupSeparator: ''\n      };\n    }\n\n    Big$1.DP = this.currency.decimals;\n    return new Big$1(this.numerator.toString()).div(this.denominator.toString()).toFormat(format);\n  };\n\n  _createClass(CurrencyAmount, [{\n    key: \"raw\",\n    get: function get() {\n      return this.numerator;\n    }\n  }]);\n\n  return CurrencyAmount;\n}(Fraction);\n\nvar TokenAmount = /*#__PURE__*/function (_CurrencyAmount) {\n  _inheritsLoose(TokenAmount, _CurrencyAmount); // amount _must_ be raw, i.e. in the native representation\n\n\n  function TokenAmount(token, amount) {\n    var _this;\n\n    _this = _CurrencyAmount.call(this, token, amount) || this;\n    _this.token = token;\n    return _this;\n  }\n\n  var _proto = TokenAmount.prototype;\n\n  _proto.add = function add(other) {\n    !this.token.equals(other.token) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'TOKEN') : invariant(false) : void 0;\n    return new TokenAmount(this.token, JSBI.add(this.raw, other.raw));\n  };\n\n  _proto.subtract = function subtract(other) {\n    !this.token.equals(other.token) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'TOKEN') : invariant(false) : void 0;\n    return new TokenAmount(this.token, JSBI.subtract(this.raw, other.raw));\n  };\n\n  return TokenAmount;\n}(CurrencyAmount);\n\nvar Price = /*#__PURE__*/function (_Fraction) {\n  _inheritsLoose(Price, _Fraction); // denominator and numerator _must_ be raw, i.e. in the native representation\n\n\n  function Price(baseCurrency, quoteCurrency, denominator, numerator) {\n    var _this;\n\n    _this = _Fraction.call(this, numerator, denominator) || this;\n    _this.baseCurrency = baseCurrency;\n    _this.quoteCurrency = quoteCurrency;\n    _this.scalar = new Fraction(JSBI.exponentiate(TEN, JSBI.BigInt(baseCurrency.decimals)), JSBI.exponentiate(TEN, JSBI.BigInt(quoteCurrency.decimals)));\n    return _this;\n  }\n\n  Price.fromRoute = function fromRoute(route) {\n    var prices = [];\n\n    for (var _iterator = _createForOfIteratorHelperLoose(route.pairs.entries()), _step; !(_step = _iterator()).done;) {\n      var _step$value = _step.value,\n          i = _step$value[0],\n          pair = _step$value[1];\n      prices.push(route.path[i].equals(pair.token0) ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.raw, pair.reserve1.raw) : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.raw, pair.reserve0.raw));\n    }\n\n    return prices.slice(1).reduce(function (accumulator, currentValue) {\n      return accumulator.multiply(currentValue);\n    }, prices[0]);\n  };\n\n  var _proto = Price.prototype;\n\n  _proto.invert = function invert() {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator);\n  };\n\n  _proto.multiply = function multiply(other) {\n    !currencyEquals(this.quoteCurrency, other.baseCurrency) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'TOKEN') : invariant(false) : void 0;\n\n    var fraction = _Fraction.prototype.multiply.call(this, other);\n\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator);\n  } // performs floor division on overflow\n  ;\n\n  _proto.quote = function quote(currencyAmount) {\n    !currencyEquals(currencyAmount.currency, this.baseCurrency) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'TOKEN') : invariant(false) : void 0;\n\n    if (this.quoteCurrency instanceof Token) {\n      return new TokenAmount(this.quoteCurrency, _Fraction.prototype.multiply.call(this, currencyAmount.raw).quotient);\n    }\n\n    return CurrencyAmount.ether(_Fraction.prototype.multiply.call(this, currencyAmount.raw).quotient);\n  };\n\n  _proto.toSignificant = function toSignificant(significantDigits, format, rounding) {\n    if (significantDigits === void 0) {\n      significantDigits = 6;\n    }\n\n    return this.adjusted.toSignificant(significantDigits, format, rounding);\n  };\n\n  _proto.toFixed = function toFixed(decimalPlaces, format, rounding) {\n    if (decimalPlaces === void 0) {\n      decimalPlaces = 4;\n    }\n\n    return this.adjusted.toFixed(decimalPlaces, format, rounding);\n  };\n\n  _createClass(Price, [{\n    key: \"raw\",\n    get: function get() {\n      return new Fraction(this.numerator, this.denominator);\n    }\n  }, {\n    key: \"adjusted\",\n    get: function get() {\n      return _Fraction.prototype.multiply.call(this, this.scalar);\n    }\n  }]);\n\n  return Price;\n}(Fraction);\n\nvar PAIR_ADDRESS_CACHE = {};\n\nvar Pair = /*#__PURE__*/function () {\n  function Pair(tokenAmountA, tokenAmountB) {\n    var tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n    ? [tokenAmountA, tokenAmountB] : [tokenAmountB, tokenAmountA];\n    this.liquidityToken = new Token(tokenAmounts[0].token.chainId, Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token), 18, 'UNI-V2', 'Uniswap V2');\n    this.tokenAmounts = tokenAmounts;\n  }\n\n  Pair.getAddress = function getAddress(tokenA, tokenB) {\n    var _PAIR_ADDRESS_CACHE, _PAIR_ADDRESS_CACHE$t;\n\n    var tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA]; // does safety checks\n\n    if (((_PAIR_ADDRESS_CACHE = PAIR_ADDRESS_CACHE) === null || _PAIR_ADDRESS_CACHE === void 0 ? void 0 : (_PAIR_ADDRESS_CACHE$t = _PAIR_ADDRESS_CACHE[tokens[0].address]) === null || _PAIR_ADDRESS_CACHE$t === void 0 ? void 0 : _PAIR_ADDRESS_CACHE$t[tokens[1].address]) === undefined) {\n      var _PAIR_ADDRESS_CACHE2, _extends2, _extends3;\n\n      PAIR_ADDRESS_CACHE = _extends({}, PAIR_ADDRESS_CACHE, (_extends3 = {}, _extends3[tokens[0].address] = _extends({}, (_PAIR_ADDRESS_CACHE2 = PAIR_ADDRESS_CACHE) === null || _PAIR_ADDRESS_CACHE2 === void 0 ? void 0 : _PAIR_ADDRESS_CACHE2[tokens[0].address], (_extends2 = {}, _extends2[tokens[1].address] = getCreate2Address(FACTORY_ADDRESS, keccak256(['bytes'], [pack(['address', 'address'], [tokens[0].address, tokens[1].address])]), INIT_CODE_HASH), _extends2)), _extends3));\n    }\n\n    return PAIR_ADDRESS_CACHE[tokens[0].address][tokens[1].address];\n  }\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  ;\n\n  var _proto = Pair.prototype;\n\n  _proto.involvesToken = function involvesToken(token) {\n    return token.equals(this.token0) || token.equals(this.token1);\n  }\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  ;\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n\n\n  _proto.priceOf = function priceOf(token) {\n    !this.involvesToken(token) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'TOKEN') : invariant(false) : void 0;\n    return token.equals(this.token0) ? this.token0Price : this.token1Price;\n  }\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  ;\n\n  _proto.reserveOf = function reserveOf(token) {\n    !this.involvesToken(token) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'TOKEN') : invariant(false) : void 0;\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1;\n  };\n\n  _proto.getOutputAmount = function getOutputAmount(inputAmount) {\n    !this.involvesToken(inputAmount.token) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'TOKEN') : invariant(false) : void 0;\n\n    if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO)) {\n      throw new InsufficientReservesError();\n    }\n\n    var inputReserve = this.reserveOf(inputAmount.token);\n    var outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0);\n    var inputAmountWithFee = JSBI.multiply(inputAmount.raw, _997);\n    var numerator = JSBI.multiply(inputAmountWithFee, outputReserve.raw);\n    var denominator = JSBI.add(JSBI.multiply(inputReserve.raw, _1000), inputAmountWithFee);\n    var outputAmount = new TokenAmount(inputAmount.token.equals(this.token0) ? this.token1 : this.token0, JSBI.divide(numerator, denominator));\n\n    if (JSBI.equal(outputAmount.raw, ZERO)) {\n      throw new InsufficientInputAmountError();\n    }\n\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))];\n  };\n\n  _proto.getInputAmount = function getInputAmount(outputAmount) {\n    !this.involvesToken(outputAmount.token) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'TOKEN') : invariant(false) : void 0;\n\n    if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO) || JSBI.greaterThanOrEqual(outputAmount.raw, this.reserveOf(outputAmount.token).raw)) {\n      throw new InsufficientReservesError();\n    }\n\n    var outputReserve = this.reserveOf(outputAmount.token);\n    var inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0);\n    var numerator = JSBI.multiply(JSBI.multiply(inputReserve.raw, outputAmount.raw), _1000);\n    var denominator = JSBI.multiply(JSBI.subtract(outputReserve.raw, outputAmount.raw), _997);\n    var inputAmount = new TokenAmount(outputAmount.token.equals(this.token0) ? this.token1 : this.token0, JSBI.add(JSBI.divide(numerator, denominator), ONE));\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))];\n  };\n\n  _proto.getLiquidityMinted = function getLiquidityMinted(totalSupply, tokenAmountA, tokenAmountB) {\n    !totalSupply.token.equals(this.liquidityToken) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'LIQUIDITY') : invariant(false) : void 0;\n    var tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n    ? [tokenAmountA, tokenAmountB] : [tokenAmountB, tokenAmountA];\n    !(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1)) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'TOKEN') : invariant(false) : void 0;\n    var liquidity;\n\n    if (JSBI.equal(totalSupply.raw, ZERO)) {\n      liquidity = JSBI.subtract(sqrt(JSBI.multiply(tokenAmounts[0].raw, tokenAmounts[1].raw)), MINIMUM_LIQUIDITY);\n    } else {\n      var amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].raw, totalSupply.raw), this.reserve0.raw);\n      var amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].raw, totalSupply.raw), this.reserve1.raw);\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1;\n    }\n\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError();\n    }\n\n    return new TokenAmount(this.liquidityToken, liquidity);\n  };\n\n  _proto.getLiquidityValue = function getLiquidityValue(token, totalSupply, liquidity, feeOn, kLast) {\n    if (feeOn === void 0) {\n      feeOn = false;\n    }\n\n    !this.involvesToken(token) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'TOKEN') : invariant(false) : void 0;\n    !totalSupply.token.equals(this.liquidityToken) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'TOTAL_SUPPLY') : invariant(false) : void 0;\n    !liquidity.token.equals(this.liquidityToken) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'LIQUIDITY') : invariant(false) : void 0;\n    !JSBI.lessThanOrEqual(liquidity.raw, totalSupply.raw) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'LIQUIDITY') : invariant(false) : void 0;\n    var totalSupplyAdjusted;\n\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply;\n    } else {\n      !!!kLast ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'K_LAST') : invariant(false) : void 0;\n      var kLastParsed = parseBigintIsh(kLast);\n\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        var rootK = sqrt(JSBI.multiply(this.reserve0.raw, this.reserve1.raw));\n        var rootKLast = sqrt(kLastParsed);\n\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          var numerator = JSBI.multiply(totalSupply.raw, JSBI.subtract(rootK, rootKLast));\n          var denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast);\n          var feeLiquidity = JSBI.divide(numerator, denominator);\n          totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity));\n        } else {\n          totalSupplyAdjusted = totalSupply;\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply;\n      }\n    }\n\n    return new TokenAmount(token, JSBI.divide(JSBI.multiply(liquidity.raw, this.reserveOf(token).raw), totalSupplyAdjusted.raw));\n  };\n\n  _createClass(Pair, [{\n    key: \"token0Price\",\n    get: function get() {\n      return new Price(this.token0, this.token1, this.tokenAmounts[0].raw, this.tokenAmounts[1].raw);\n    }\n    /**\n     * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n     */\n\n  }, {\n    key: \"token1Price\",\n    get: function get() {\n      return new Price(this.token1, this.token0, this.tokenAmounts[1].raw, this.tokenAmounts[0].raw);\n    }\n  }, {\n    key: \"chainId\",\n    get: function get() {\n      return this.token0.chainId;\n    }\n  }, {\n    key: \"token0\",\n    get: function get() {\n      return this.tokenAmounts[0].token;\n    }\n  }, {\n    key: \"token1\",\n    get: function get() {\n      return this.tokenAmounts[1].token;\n    }\n  }, {\n    key: \"reserve0\",\n    get: function get() {\n      return this.tokenAmounts[0];\n    }\n  }, {\n    key: \"reserve1\",\n    get: function get() {\n      return this.tokenAmounts[1];\n    }\n  }]);\n\n  return Pair;\n}();\n\nvar Route = /*#__PURE__*/function () {\n  function Route(pairs, input, output) {\n    !(pairs.length > 0) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'PAIRS') : invariant(false) : void 0;\n    !pairs.every(function (pair) {\n      return pair.chainId === pairs[0].chainId;\n    }) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'CHAIN_IDS') : invariant(false) : void 0;\n    !(input instanceof Token && pairs[0].involvesToken(input) || input === ETHER && pairs[0].involvesToken(WETH[pairs[0].chainId])) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'INPUT') : invariant(false) : void 0;\n    !(typeof output === 'undefined' || output instanceof Token && pairs[pairs.length - 1].involvesToken(output) || output === ETHER && pairs[pairs.length - 1].involvesToken(WETH[pairs[0].chainId])) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'OUTPUT') : invariant(false) : void 0;\n    var path = [input instanceof Token ? input : WETH[pairs[0].chainId]];\n\n    for (var _iterator = _createForOfIteratorHelperLoose(pairs.entries()), _step; !(_step = _iterator()).done;) {\n      var _step$value = _step.value,\n          i = _step$value[0],\n          pair = _step$value[1];\n      var currentInput = path[i];\n      !(currentInput.equals(pair.token0) || currentInput.equals(pair.token1)) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'PATH') : invariant(false) : void 0;\n\n      var _output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0;\n\n      path.push(_output);\n    }\n\n    this.pairs = pairs;\n    this.path = path;\n    this.midPrice = Price.fromRoute(this);\n    this.input = input;\n    this.output = output !== null && output !== void 0 ? output : path[path.length - 1];\n  }\n\n  _createClass(Route, [{\n    key: \"chainId\",\n    get: function get() {\n      return this.pairs[0].chainId;\n    }\n  }]);\n\n  return Route;\n}();\n\nvar _100_PERCENT = /*#__PURE__*/new Fraction(_100);\n\nvar Percent = /*#__PURE__*/function (_Fraction) {\n  _inheritsLoose(Percent, _Fraction);\n\n  function Percent() {\n    return _Fraction.apply(this, arguments) || this;\n  }\n\n  var _proto = Percent.prototype;\n\n  _proto.toSignificant = function toSignificant(significantDigits, format, rounding) {\n    if (significantDigits === void 0) {\n      significantDigits = 5;\n    }\n\n    return this.multiply(_100_PERCENT).toSignificant(significantDigits, format, rounding);\n  };\n\n  _proto.toFixed = function toFixed(decimalPlaces, format, rounding) {\n    if (decimalPlaces === void 0) {\n      decimalPlaces = 2;\n    }\n\n    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding);\n  };\n\n  return Percent;\n}(Fraction);\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\n\n\nfunction computePriceImpact(midPrice, inputAmount, outputAmount) {\n  var exactQuote = midPrice.raw.multiply(inputAmount.raw); // calculate slippage := (exactQuote - outputAmount) / exactQuote\n\n  var slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote);\n  return new Percent(slippage.numerator, slippage.denominator);\n} // comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\n\n\nfunction inputOutputComparator(a, b) {\n  // must have same input and output token for comparison\n  !currencyEquals(a.inputAmount.currency, b.inputAmount.currency) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'INPUT_CURRENCY') : invariant(false) : void 0;\n  !currencyEquals(a.outputAmount.currency, b.outputAmount.currency) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'OUTPUT_CURRENCY') : invariant(false) : void 0;\n\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0;\n    } // trade A requires less input than trade B, so A should come first\n\n\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1;\n    } else {\n      return 1;\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1;\n    } else {\n      return -1;\n    }\n  }\n} // extension of the input output comparator that also considers other dimensions of the trade in ranking them\n\n\nfunction tradeComparator(a, b) {\n  var ioComp = inputOutputComparator(a, b);\n\n  if (ioComp !== 0) {\n    return ioComp;\n  } // consider lowest slippage next, since these are less likely to fail\n\n\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1;\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1;\n  } // finally consider the number of hops since each hop costs gas\n\n\n  return a.route.path.length - b.route.path.length;\n}\n/**\n * Given a currency amount and a chain ID, returns the equivalent representation as the token amount.\n * In other words, if the currency is ETHER, returns the WETH token amount for the given chain. Otherwise, returns\n * the input currency amount.\n */\n\n\nfunction wrappedAmount(currencyAmount, chainId) {\n  if (currencyAmount instanceof TokenAmount) return currencyAmount;\n  if (currencyAmount.currency === ETHER) return new TokenAmount(WETH[chainId], currencyAmount.raw);\n  process.env.NODE_ENV !== \"production\" ? invariant(false, 'CURRENCY') : invariant(false);\n}\n\nfunction wrappedCurrency(currency, chainId) {\n  if (currency instanceof Token) return currency;\n  if (currency === ETHER) return WETH[chainId];\n  process.env.NODE_ENV !== \"production\" ? invariant(false, 'CURRENCY') : invariant(false);\n}\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\n\n\nvar Trade = /*#__PURE__*/function () {\n  function Trade(route, amount, tradeType) {\n    var amounts = new Array(route.path.length);\n    var nextPairs = new Array(route.pairs.length);\n\n    if (tradeType === TradeType.EXACT_INPUT) {\n      !currencyEquals(amount.currency, route.input) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'INPUT') : invariant(false) : void 0;\n      amounts[0] = wrappedAmount(amount, route.chainId);\n\n      for (var i = 0; i < route.path.length - 1; i++) {\n        var pair = route.pairs[i];\n\n        var _pair$getOutputAmount = pair.getOutputAmount(amounts[i]),\n            outputAmount = _pair$getOutputAmount[0],\n            nextPair = _pair$getOutputAmount[1];\n\n        amounts[i + 1] = outputAmount;\n        nextPairs[i] = nextPair;\n      }\n    } else {\n      !currencyEquals(amount.currency, route.output) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'OUTPUT') : invariant(false) : void 0;\n      amounts[amounts.length - 1] = wrappedAmount(amount, route.chainId);\n\n      for (var _i = route.path.length - 1; _i > 0; _i--) {\n        var _pair = route.pairs[_i - 1];\n\n        var _pair$getInputAmount = _pair.getInputAmount(amounts[_i]),\n            inputAmount = _pair$getInputAmount[0],\n            _nextPair = _pair$getInputAmount[1];\n\n        amounts[_i - 1] = inputAmount;\n        nextPairs[_i - 1] = _nextPair;\n      }\n    }\n\n    this.route = route;\n    this.tradeType = tradeType;\n    this.inputAmount = tradeType === TradeType.EXACT_INPUT ? amount : route.input === ETHER ? CurrencyAmount.ether(amounts[0].raw) : amounts[0];\n    this.outputAmount = tradeType === TradeType.EXACT_OUTPUT ? amount : route.output === ETHER ? CurrencyAmount.ether(amounts[amounts.length - 1].raw) : amounts[amounts.length - 1];\n    this.executionPrice = new Price(this.inputAmount.currency, this.outputAmount.currency, this.inputAmount.raw, this.outputAmount.raw);\n    this.nextMidPrice = Price.fromRoute(new Route(nextPairs, route.input));\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount);\n  }\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n\n\n  Trade.exactIn = function exactIn(route, amountIn) {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT);\n  }\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  ;\n\n  Trade.exactOut = function exactOut(route, amountOut) {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT);\n  }\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  ;\n\n  var _proto = Trade.prototype;\n\n  _proto.minimumAmountOut = function minimumAmountOut(slippageTolerance) {\n    !!slippageTolerance.lessThan(ZERO) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'SLIPPAGE_TOLERANCE') : invariant(false) : void 0;\n\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount;\n    } else {\n      var slippageAdjustedAmountOut = new Fraction(ONE).add(slippageTolerance).invert().multiply(this.outputAmount.raw).quotient;\n      return this.outputAmount instanceof TokenAmount ? new TokenAmount(this.outputAmount.token, slippageAdjustedAmountOut) : CurrencyAmount.ether(slippageAdjustedAmountOut);\n    }\n  }\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  ;\n\n  _proto.maximumAmountIn = function maximumAmountIn(slippageTolerance) {\n    !!slippageTolerance.lessThan(ZERO) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'SLIPPAGE_TOLERANCE') : invariant(false) : void 0;\n\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount;\n    } else {\n      var slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient;\n      return this.inputAmount instanceof TokenAmount ? new TokenAmount(this.inputAmount.token, slippageAdjustedAmountIn) : CurrencyAmount.ether(slippageAdjustedAmountIn);\n    }\n  }\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  ;\n\n  Trade.bestTradeExactIn = function bestTradeExactIn(pairs, currencyAmountIn, currencyOut, _temp, // used in recursion.\n  currentPairs, originalAmountIn, bestTrades) {\n    var _ref = _temp === void 0 ? {} : _temp,\n        _ref$maxNumResults = _ref.maxNumResults,\n        maxNumResults = _ref$maxNumResults === void 0 ? 3 : _ref$maxNumResults,\n        _ref$maxHops = _ref.maxHops,\n        maxHops = _ref$maxHops === void 0 ? 3 : _ref$maxHops;\n\n    if (currentPairs === void 0) {\n      currentPairs = [];\n    }\n\n    if (originalAmountIn === void 0) {\n      originalAmountIn = currencyAmountIn;\n    }\n\n    if (bestTrades === void 0) {\n      bestTrades = [];\n    }\n\n    !(pairs.length > 0) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'PAIRS') : invariant(false) : void 0;\n    !(maxHops > 0) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'MAX_HOPS') : invariant(false) : void 0;\n    !(originalAmountIn === currencyAmountIn || currentPairs.length > 0) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'INVALID_RECURSION') : invariant(false) : void 0;\n    var chainId = currencyAmountIn instanceof TokenAmount ? currencyAmountIn.token.chainId : currencyOut instanceof Token ? currencyOut.chainId : undefined;\n    !(chainId !== undefined) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'CHAIN_ID') : invariant(false) : void 0;\n    var amountIn = wrappedAmount(currencyAmountIn, chainId);\n    var tokenOut = wrappedCurrency(currencyOut, chainId);\n\n    for (var i = 0; i < pairs.length; i++) {\n      var pair = pairs[i]; // pair irrelevant\n\n      if (!pair.token0.equals(amountIn.token) && !pair.token1.equals(amountIn.token)) continue;\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue;\n      var amountOut = void 0;\n\n      try {\n        ;\n\n        var _pair$getOutputAmount2 = pair.getOutputAmount(amountIn);\n\n        amountOut = _pair$getOutputAmount2[0];\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue;\n        }\n\n        throw error;\n      } // we have arrived at the output token, so this is the final trade of one of the paths\n\n\n      if (amountOut.token.equals(tokenOut)) {\n        sortedInsert(bestTrades, new Trade(new Route([].concat(currentPairs, [pair]), originalAmountIn.currency, currencyOut), originalAmountIn, TradeType.EXACT_INPUT), maxNumResults, tradeComparator);\n      } else if (maxHops > 1 && pairs.length > 1) {\n        var pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length)); // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n\n        Trade.bestTradeExactIn(pairsExcludingThisPair, amountOut, currencyOut, {\n          maxNumResults: maxNumResults,\n          maxHops: maxHops - 1\n        }, [].concat(currentPairs, [pair]), originalAmountIn, bestTrades);\n      }\n    }\n\n    return bestTrades;\n  }\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param currencyAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  ;\n\n  Trade.bestTradeExactOut = function bestTradeExactOut(pairs, currencyIn, currencyAmountOut, _temp2, // used in recursion.\n  currentPairs, originalAmountOut, bestTrades) {\n    var _ref2 = _temp2 === void 0 ? {} : _temp2,\n        _ref2$maxNumResults = _ref2.maxNumResults,\n        maxNumResults = _ref2$maxNumResults === void 0 ? 3 : _ref2$maxNumResults,\n        _ref2$maxHops = _ref2.maxHops,\n        maxHops = _ref2$maxHops === void 0 ? 3 : _ref2$maxHops;\n\n    if (currentPairs === void 0) {\n      currentPairs = [];\n    }\n\n    if (originalAmountOut === void 0) {\n      originalAmountOut = currencyAmountOut;\n    }\n\n    if (bestTrades === void 0) {\n      bestTrades = [];\n    }\n\n    !(pairs.length > 0) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'PAIRS') : invariant(false) : void 0;\n    !(maxHops > 0) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'MAX_HOPS') : invariant(false) : void 0;\n    !(originalAmountOut === currencyAmountOut || currentPairs.length > 0) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'INVALID_RECURSION') : invariant(false) : void 0;\n    var chainId = currencyAmountOut instanceof TokenAmount ? currencyAmountOut.token.chainId : currencyIn instanceof Token ? currencyIn.chainId : undefined;\n    !(chainId !== undefined) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'CHAIN_ID') : invariant(false) : void 0;\n    var amountOut = wrappedAmount(currencyAmountOut, chainId);\n    var tokenIn = wrappedCurrency(currencyIn, chainId);\n\n    for (var i = 0; i < pairs.length; i++) {\n      var pair = pairs[i]; // pair irrelevant\n\n      if (!pair.token0.equals(amountOut.token) && !pair.token1.equals(amountOut.token)) continue;\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue;\n      var amountIn = void 0;\n\n      try {\n        ;\n\n        var _pair$getInputAmount2 = pair.getInputAmount(amountOut);\n\n        amountIn = _pair$getInputAmount2[0];\n      } catch (error) {\n        // not enough liquidity in this pair\n        if (error.isInsufficientReservesError) {\n          continue;\n        }\n\n        throw error;\n      } // we have arrived at the input token, so this is the first trade of one of the paths\n\n\n      if (amountIn.token.equals(tokenIn)) {\n        sortedInsert(bestTrades, new Trade(new Route([pair].concat(currentPairs), currencyIn, originalAmountOut.currency), originalAmountOut, TradeType.EXACT_OUTPUT), maxNumResults, tradeComparator);\n      } else if (maxHops > 1 && pairs.length > 1) {\n        var pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length)); // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n\n        Trade.bestTradeExactOut(pairsExcludingThisPair, currencyIn, amountIn, {\n          maxNumResults: maxNumResults,\n          maxHops: maxHops - 1\n        }, [pair].concat(currentPairs), originalAmountOut, bestTrades);\n      }\n    }\n\n    return bestTrades;\n  };\n\n  return Trade;\n}();\n\nfunction toHex(currencyAmount) {\n  return \"0x\" + currencyAmount.raw.toString(16);\n}\n\nvar ZERO_HEX = '0x0';\n/**\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\n */\n\nvar Router = /*#__PURE__*/function () {\n  /**\n   * Cannot be constructed.\n   */\n  function Router() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n\n\n  Router.swapCallParameters = function swapCallParameters(trade, options) {\n    var etherIn = trade.inputAmount.currency === ETHER;\n    var etherOut = trade.outputAmount.currency === ETHER; // the router does not support both ether in and out\n\n    !!(etherIn && etherOut) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'ETHER_IN_OUT') : invariant(false) : void 0;\n    !(options.ttl > 0) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'TTL') : invariant(false) : void 0;\n    var to = validateAndParseAddress(options.recipient);\n    var amountIn = toHex(trade.maximumAmountIn(options.allowedSlippage));\n    var amountOut = toHex(trade.minimumAmountOut(options.allowedSlippage));\n    var path = trade.route.path.map(function (token) {\n      return token.address;\n    });\n    var deadline = \"0x\" + (Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16);\n    var useFeeOnTransfer = Boolean(options.feeOnTransfer);\n    var methodName;\n    var args;\n    var value;\n\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'; // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n\n          args = [amountOut, path, to, deadline];\n          value = amountIn;\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'; // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n\n          args = [amountIn, amountOut, path, to, deadline];\n          value = ZERO_HEX;\n        } else {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens' : 'swapExactTokensForTokens'; // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n\n          args = [amountIn, amountOut, path, to, deadline];\n          value = ZERO_HEX;\n        }\n\n        break;\n\n      case TradeType.EXACT_OUTPUT:\n        !!useFeeOnTransfer ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'EXACT_OUT_FOT') : invariant(false) : void 0;\n\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'; // (uint amountOut, address[] calldata path, address to, uint deadline)\n\n          args = [amountOut, path, to, deadline];\n          value = amountIn;\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'; // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n\n          args = [amountOut, amountIn, path, to, deadline];\n          value = ZERO_HEX;\n        } else {\n          methodName = 'swapTokensForExactTokens'; // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n\n          args = [amountOut, amountIn, path, to, deadline];\n          value = ZERO_HEX;\n        }\n\n        break;\n    }\n\n    return {\n      methodName: methodName,\n      args: args,\n      value: value\n    };\n  };\n\n  return Router;\n}();\n\nvar ERC20 = [{\n  constant: true,\n  inputs: [],\n  name: \"decimals\",\n  outputs: [{\n    name: \"\",\n    type: \"uint8\"\n  }],\n  payable: false,\n  stateMutability: \"view\",\n  type: \"function\"\n}, {\n  constant: true,\n  inputs: [{\n    name: \"\",\n    type: \"address\"\n  }],\n  name: \"balanceOf\",\n  outputs: [{\n    name: \"\",\n    type: \"uint256\"\n  }],\n  payable: false,\n  stateMutability: \"view\",\n  type: \"function\"\n}];\n\nvar _TOKEN_DECIMALS_CACHE;\n\nvar TOKEN_DECIMALS_CACHE = (_TOKEN_DECIMALS_CACHE = {}, _TOKEN_DECIMALS_CACHE[ChainId.MAINNET] = {\n  '0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A': 9 // DGD\n\n}, _TOKEN_DECIMALS_CACHE);\n/**\n * Contains methods for constructing instances of pairs and tokens from on-chain data.\n */\n\nvar Fetcher = /*#__PURE__*/function () {\n  /**\n   * Cannot be constructed.\n   */\n  function Fetcher() {}\n  /**\n   * Fetch information for a given token on the given chain, using the given ethers provider.\n   * @param chainId chain of the token\n   * @param address address of the token on the chain\n   * @param provider provider used to fetch the token\n   * @param symbol optional symbol of the token\n   * @param name optional name of the token\n   */\n\n\n  Fetcher.fetchTokenData = function fetchTokenData(chainId, address, provider, symbol, name) {\n    try {\n      var _TOKEN_DECIMALS_CACHE2, _TOKEN_DECIMALS_CACHE3;\n\n      var _temp3 = function _temp3(parsedDecimals) {\n        return new Token(chainId, address, parsedDecimals, symbol, name);\n      };\n\n      if (provider === undefined) provider = getDefaultProvider(getNetwork(chainId));\n\n      var _temp4 = typeof ((_TOKEN_DECIMALS_CACHE2 = TOKEN_DECIMALS_CACHE) === null || _TOKEN_DECIMALS_CACHE2 === void 0 ? void 0 : (_TOKEN_DECIMALS_CACHE3 = _TOKEN_DECIMALS_CACHE2[chainId]) === null || _TOKEN_DECIMALS_CACHE3 === void 0 ? void 0 : _TOKEN_DECIMALS_CACHE3[address]) === 'number';\n\n      return Promise.resolve(_temp4 ? _temp3(TOKEN_DECIMALS_CACHE[chainId][address]) : Promise.resolve(new Contract(address, ERC20, provider).decimals().then(function (decimals) {\n        var _TOKEN_DECIMALS_CACHE4, _extends2, _extends3;\n\n        TOKEN_DECIMALS_CACHE = _extends({}, TOKEN_DECIMALS_CACHE, (_extends3 = {}, _extends3[chainId] = _extends({}, (_TOKEN_DECIMALS_CACHE4 = TOKEN_DECIMALS_CACHE) === null || _TOKEN_DECIMALS_CACHE4 === void 0 ? void 0 : _TOKEN_DECIMALS_CACHE4[chainId], (_extends2 = {}, _extends2[address] = decimals, _extends2)), _extends3));\n        return decimals;\n      })).then(_temp3));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  }\n  /**\n   * Fetches information about a pair and constructs a pair from the given two tokens.\n   * @param tokenA first token\n   * @param tokenB second token\n   * @param provider the provider to use to fetch the data\n   */\n  ;\n\n  Fetcher.fetchPairData = function fetchPairData(tokenA, tokenB, provider) {\n    try {\n      if (provider === undefined) provider = getDefaultProvider(getNetwork(tokenA.chainId));\n      !(tokenA.chainId === tokenB.chainId) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'CHAIN_ID') : invariant(false) : void 0;\n      var address = Pair.getAddress(tokenA, tokenB);\n      return Promise.resolve(new Contract(address, IUniswapV2Pair.abi, provider).getReserves()).then(function (_ref) {\n        var reserves0 = _ref[0],\n            reserves1 = _ref[1];\n        var balances = tokenA.sortsBefore(tokenB) ? [reserves0, reserves1] : [reserves1, reserves0];\n        return new Pair(new TokenAmount(tokenA, balances[0]), new TokenAmount(tokenB, balances[1]));\n      });\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  return Fetcher;\n}();\n\nexport { ChainId, Currency, CurrencyAmount, ETHER, FACTORY_ADDRESS, Fetcher, Fraction, INIT_CODE_HASH, InsufficientInputAmountError, InsufficientReservesError, MINIMUM_LIQUIDITY, Pair, Percent, Price, Rounding, Route, Router, Token, TokenAmount, Trade, TradeType, WETH, currencyEquals, inputOutputComparator, tradeComparator };","map":{"version":3,"sources":["../src/constants.ts","../src/errors.ts","../src/utils.ts","../src/entities/currency.ts","../src/entities/token.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/tokenAmount.ts","../src/entities/fractions/price.ts","../src/entities/pair.ts","../src/entities/route.ts","../src/entities/fractions/percent.ts","../src/entities/trade.ts","../src/router.ts","../src/fetcher.ts"],"names":["ChainId","TradeType","Rounding","INIT_CODE_HASH","MINIMUM_LIQUIDITY","ONE","JSBI","BigInt","TWO","THREE","FIVE","TEN","_100","_997","_1000","SolidityType","CAN_SET_PROTOTYPE","Object","SOLIDITY_TYPE_MAXIMA","solidityType","checksummedAddress","bigintIsh","validateSolidityTypeInstance","x","z","items","push","hi","mid","lo","ETHER","Currency","chainId","other","toLowerCase","address","currencyA","Decimal","Big","toFormat","_Big","toSignificantRounding","toFixedRounding","ROUND_DOWN","denominator","parseBigintIsh","divide","Fraction","otherParsed","numerator","lessThan","multiply","greaterThan","format","groupSeparator","rounding","ROUND_HALF_UP","significantDigits","precision","quotient","decimalPlaces","CurrencyAmount","parsedAmount","exponentiate","currency","currencyEquals","raw","TokenAmount","add","subtract","i","pair","prices","route","accumulator","currentValue","baseCurrency","quoteCurrency","currencyAmount","tokenAmounts","token","token0","inputAmount","InsufficientReservesError","outputReserve","inputAmountWithFee","outputAmount","equals","InsufficientInputAmountError","inputReserve","totalSupply","tokenAmountB","liquidity","amount1","lessThanOrEqual","amount0","feeOn","liquidityToken","totalSupplyAdjusted","kLastParsed","rootK","sqrt","rootKLast","feeLiquidity","pairs","every","input","involvesToken","output","WETH","currentInput","path","midPrice","exactQuote","Percent","slippage","a","b","ioComp","inputOutputComparator","amountOut","amounts","nextPairs","amount","wrappedAmount","length","tradeType","Price","fromRoute","computePriceImpact","slippageTolerance","slippageAdjustedAmountOut","slippageAdjustedAmountIn","maxNumResults","maxHops","currentPairs","originalAmountIn","currencyAmountIn","bestTrades","currencyOut","amountIn","tokenOut","wrappedCurrency","reserve0","reserve1","equalTo","error","sortedInsert","pairsExcludingThisPair","Trade","originalAmountOut","currencyAmountOut","currencyIn","tokenIn","etherIn","trade","etherOut","options","validateAndParseAddress","maximumAmountIn","toHex","useFeeOnTransfer","Boolean","methodName","value","args","TOKEN_DECIMALS_CACHE","provider","tokenA","Pair","getAddress","reserves0","reserves1","balances"],"mappings":"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","sourcesContent":["import JSBI from 'jsbi'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | bigint | string\n\nexport enum ChainId {\n  MAINNET = 1,\n  ROPSTEN = 3,\n  RINKEBY = 4,\n  GÖRLI = 5,\n  KOVAN = 42\n}\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n\nexport const FACTORY_ADDRESS = '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f'\n\nexport const INIT_CODE_HASH = '0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f'\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const TWO = JSBI.BigInt(2)\nexport const THREE = JSBI.BigInt(3)\nexport const FIVE = JSBI.BigInt(5)\nexport const TEN = JSBI.BigInt(10)\nexport const _100 = JSBI.BigInt(100)\nexport const _997 = JSBI.BigInt(997)\nexport const _1000 = JSBI.BigInt(1000)\n\nexport enum SolidityType {\n  uint8 = 'uint8',\n  uint256 = 'uint256'\n}\n\nexport const SOLIDITY_TYPE_MAXIMA = {\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n}\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport warning from 'tiny-warning'\nimport JSBI from 'jsbi'\nimport { getAddress } from '@ethersproject/address'\n\nimport { BigintIsh, ZERO, ONE, TWO, THREE, SolidityType, SOLIDITY_TYPE_MAXIMA } from './constants'\n\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\n}\n\n// warns if addresses are not checksummed\nexport function validateAndParseAddress(address: string): string {\n  try {\n    const checksummedAddress = getAddress(address)\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\n    return checksummedAddress\n  } catch (error) {\n    invariant(false, `${address} is not a valid address.`)\n  }\n}\n\nexport function parseBigintIsh(bigintIsh: BigintIsh): JSBI {\n  return bigintIsh instanceof JSBI\n    ? bigintIsh\n    : typeof bigintIsh === 'bigint'\n    ? JSBI.BigInt(bigintIsh.toString())\n    : JSBI.BigInt(bigintIsh)\n}\n\n// mock the on-chain sqrt function\nexport function sqrt(y: JSBI): JSBI {\n  validateSolidityTypeInstance(y, SolidityType.uint256)\n  let z: JSBI = ZERO\n  let x: JSBI\n  if (JSBI.greaterThan(y, THREE)) {\n    z = y\n    x = JSBI.add(JSBI.divide(y, TWO), ONE)\n    while (JSBI.lessThan(x, z)) {\n      z = x\n      x = JSBI.divide(JSBI.add(JSBI.divide(y, x), x), TWO)\n    }\n  } else if (JSBI.notEqual(y, ZERO)) {\n    z = ONE\n  }\n  return z\n}\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","import JSBI from 'jsbi'\n\nimport { SolidityType } from '../constants'\nimport { validateSolidityTypeInstance } from '../utils'\n\n/**\n * A currency is any fungible financial instrument on Ethereum, including Ether and all ERC20 tokens.\n *\n * The only instance of the base class `Currency` is Ether.\n */\nexport class Currency {\n  public readonly decimals: number\n  public readonly symbol?: string\n  public readonly name?: string\n\n  /**\n   * The only instance of the base class `Currency`.\n   */\n  public static readonly ETHER: Currency = new Currency(18, 'ETH', 'Ether')\n\n  /**\n   * Constructs an instance of the base class `Currency`. The only instance of the base class `Currency` is `Currency.ETHER`.\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(decimals: number, symbol?: string, name?: string) {\n    validateSolidityTypeInstance(JSBI.BigInt(decimals), SolidityType.uint8)\n\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n}\n\nconst ETHER = Currency.ETHER\nexport { ETHER }\n","import invariant from 'tiny-invariant'\nimport { ChainId } from '../constants'\nimport { validateAndParseAddress } from '../utils'\nimport { Currency } from './currency'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends Currency {\n  public readonly chainId: ChainId\n  public readonly address: string\n\n  public constructor(chainId: ChainId, address: string, decimals: number, symbol?: string, name?: string) {\n    super(decimals, symbol, name)\n    this.chainId = chainId\n    this.address = validateAndParseAddress(address)\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Token): boolean {\n    // short circuit on reference equality\n    if (this === other) {\n      return true\n    }\n    return this.chainId === other.chainId && this.address === other.address\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n}\n\n/**\n * Compares two currencies for equality\n */\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\n  if (currencyA instanceof Token && currencyB instanceof Token) {\n    return currencyA.equals(currencyB)\n  } else if (currencyA instanceof Token) {\n    return false\n  } else if (currencyB instanceof Token) {\n    return false\n  } else {\n    return currencyA === currencyB\n  }\n}\n\nexport const WETH = {\n  [ChainId.MAINNET]: new Token(\n    ChainId.MAINNET,\n    '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.ROPSTEN]: new Token(\n    ChainId.ROPSTEN,\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.RINKEBY]: new Token(\n    ChainId.RINKEBY,\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.GÖRLI]: new Token(ChainId.GÖRLI, '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6', 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, '0xd0A1E359811322d97991E03f863a0C30C2cF029C', 18, 'WETH', 'Wrapped Ether')\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { ONE } from '../../constants'\nimport { parseBigintIsh } from '../../utils'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = ONE) {\n    this.numerator = parseBigintIsh(numerator)\n    this.denominator = parseBigintIsh(denominator)\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n}\n","import { currencyEquals } from '../token'\nimport { Currency, ETHER } from '../currency'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Big from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding, TEN, SolidityType } from '../../constants'\nimport { parseBigintIsh, validateSolidityTypeInstance } from '../../utils'\nimport { Fraction } from './fraction'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount extends Fraction {\n  public readonly currency: Currency\n\n  /**\n   * Helper that calls the constructor with the ETHER currency\n   * @param amount ether amount in wei\n   */\n  public static ether(amount: BigintIsh): CurrencyAmount {\n    return new CurrencyAmount(ETHER, amount)\n  }\n\n  // amount _must_ be raw, i.e. in the native representation\n  protected constructor(currency: Currency, amount: BigintIsh) {\n    const parsedAmount = parseBigintIsh(amount)\n    validateSolidityTypeInstance(parsedAmount, SolidityType.uint256)\n\n    super(parsedAmount, JSBI.exponentiate(TEN, JSBI.BigInt(currency.decimals)))\n    this.currency = currency\n  }\n\n  public get raw(): JSBI {\n    return this.numerator\n  }\n\n  public add(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.subtract(this.raw, other.raw))\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format)\n  }\n}\n","import { CurrencyAmount } from './currencyAmount'\nimport { Token } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh } from '../../constants'\n\nexport class TokenAmount extends CurrencyAmount {\n  public readonly token: Token\n\n  // amount _must_ be raw, i.e. in the native representation\n  public constructor(token: Token, amount: BigintIsh) {\n    super(token, amount)\n    this.token = token\n  }\n\n  public add(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.subtract(this.raw, other.raw))\n  }\n}\n","import { Token } from '../token'\nimport { TokenAmount } from './tokenAmount'\nimport { currencyEquals } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh, Rounding, TEN } from '../../constants'\nimport { Currency } from '../currency'\nimport { Route } from '../route'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\n\nexport class Price extends Fraction {\n  public readonly baseCurrency: Currency // input i.e. denominator\n  public readonly quoteCurrency: Currency // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  public static fromRoute(route: Route): Price {\n    const prices: Price[] = []\n    for (const [i, pair] of route.pairs.entries()) {\n      prices.push(\n        route.path[i].equals(pair.token0)\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.raw, pair.reserve1.raw)\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.raw, pair.reserve0.raw)\n      )\n    }\n    return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n  }\n\n  // denominator and numerator _must_ be raw, i.e. in the native representation\n  public constructor(baseCurrency: Currency, quoteCurrency: Currency, denominator: BigintIsh, numerator: BigintIsh) {\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(TEN, JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(TEN, JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  public get raw(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n\n  public get adjusted(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public invert(): Price {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  public multiply(other: Price): Price {\n    invariant(currencyEquals(this.quoteCurrency, other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  // performs floor division on overflow\n  public quote(currencyAmount: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(currencyAmount.currency, this.baseCurrency), 'TOKEN')\n    if (this.quoteCurrency instanceof Token) {\n      return new TokenAmount(this.quoteCurrency, super.multiply(currencyAmount.raw).quotient)\n    }\n    return CurrencyAmount.ether(super.multiply(currencyAmount.raw).quotient)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { pack, keccak256 } from '@ethersproject/solidity'\nimport { getCreate2Address } from '@ethersproject/address'\n\nimport {\n  BigintIsh,\n  FACTORY_ADDRESS,\n  INIT_CODE_HASH,\n  MINIMUM_LIQUIDITY,\n  ZERO,\n  ONE,\n  FIVE,\n  _997,\n  _1000,\n  ChainId\n} from '../constants'\nimport { sqrt, parseBigintIsh } from '../utils'\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\nimport { Token } from './token'\n\nlet PAIR_ADDRESS_CACHE: { [token0Address: string]: { [token1Address: string]: string } } = {}\n\nexport class Pair {\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [TokenAmount, TokenAmount]\n\n  public static getAddress(tokenA: Token, tokenB: Token): string {\n    const tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n\n    if (PAIR_ADDRESS_CACHE?.[tokens[0].address]?.[tokens[1].address] === undefined) {\n      PAIR_ADDRESS_CACHE = {\n        ...PAIR_ADDRESS_CACHE,\n        [tokens[0].address]: {\n          ...PAIR_ADDRESS_CACHE?.[tokens[0].address],\n          [tokens[1].address]: getCreate2Address(\n            FACTORY_ADDRESS,\n            keccak256(['bytes'], [pack(['address', 'address'], [tokens[0].address, tokens[1].address])]),\n            INIT_CODE_HASH\n          )\n        }\n      }\n    }\n\n    return PAIR_ADDRESS_CACHE[tokens[0].address][tokens[1].address]\n  }\n\n  public constructor(tokenAmountA: TokenAmount, tokenAmountB: TokenAmount) {\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    this.liquidityToken = new Token(\n      tokenAmounts[0].token.chainId,\n      Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token),\n      18,\n      'UNI-V2',\n      'Uniswap V2'\n    )\n    this.tokenAmounts = tokenAmounts as [TokenAmount, TokenAmount]\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price {\n    return new Price(this.token0, this.token1, this.tokenAmounts[0].raw, this.tokenAmounts[1].raw)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price {\n    return new Price(this.token1, this.token0, this.tokenAmounts[1].raw, this.tokenAmounts[0].raw)\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): ChainId {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].token\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].token\n  }\n\n  public get reserve0(): TokenAmount {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): TokenAmount {\n    return this.tokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  public getOutputAmount(inputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(inputAmount.token), 'TOKEN')\n    if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.token)\n    const outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const inputAmountWithFee = JSBI.multiply(inputAmount.raw, _997)\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.raw)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.raw, _1000), inputAmountWithFee)\n    const outputAmount = new TokenAmount(\n      inputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator)\n    )\n    if (JSBI.equal(outputAmount.raw, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getInputAmount(outputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(outputAmount.token), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.raw, ZERO) ||\n      JSBI.equal(this.reserve1.raw, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.raw, this.reserveOf(outputAmount.token).raw)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.token)\n    const inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.raw, outputAmount.raw), _1000)\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.raw, outputAmount.raw), _997)\n    const inputAmount = new TokenAmount(\n      outputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\n    )\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: TokenAmount,\n    tokenAmountA: TokenAmount,\n    tokenAmountB: TokenAmount\n  ): TokenAmount {\n    invariant(totalSupply.token.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.raw, ZERO)) {\n      liquidity = JSBI.subtract(sqrt(JSBI.multiply(tokenAmounts[0].raw, tokenAmounts[1].raw)), MINIMUM_LIQUIDITY)\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].raw, totalSupply.raw), this.reserve0.raw)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].raw, totalSupply.raw), this.reserve1.raw)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return new TokenAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: TokenAmount,\n    liquidity: TokenAmount,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.token.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.token.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.raw, totalSupply.raw), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: TokenAmount\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = parseBigintIsh(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.raw, this.reserve1.raw))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.raw, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return new TokenAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.raw, this.reserveOf(token).raw), totalSupplyAdjusted.raw)\n    )\n  }\n}\n","import { ChainId } from '../constants'\nimport invariant from 'tiny-invariant'\n\nimport { Currency, ETHER } from './currency'\nimport { Token, WETH } from './token'\nimport { Pair } from './pair'\nimport { Price } from './fractions/price'\n\nexport class Route {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: Currency\n  public readonly output: Currency\n  public readonly midPrice: Price\n\n  public constructor(pairs: Pair[], input: Currency, output?: Currency) {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(\n      pairs.every(pair => pair.chainId === pairs[0].chainId),\n      'CHAIN_IDS'\n    )\n    invariant(\n      (input instanceof Token && pairs[0].involvesToken(input)) ||\n        (input === ETHER && pairs[0].involvesToken(WETH[pairs[0].chainId])),\n      'INPUT'\n    )\n    invariant(\n      typeof output === 'undefined' ||\n        (output instanceof Token && pairs[pairs.length - 1].involvesToken(output)) ||\n        (output === ETHER && pairs[pairs.length - 1].involvesToken(WETH[pairs[0].chainId])),\n      'OUTPUT'\n    )\n\n    const path: Token[] = [input instanceof Token ? input : WETH[pairs[0].chainId]]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n\n    this.pairs = pairs\n    this.path = path\n    this.midPrice = Price.fromRoute(this)\n    this.input = input\n    this.output = output ?? path[path.length - 1]\n  }\n\n  public get chainId(): ChainId {\n    return this.pairs[0].chainId\n  }\n}\n","import { Rounding, _100 } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst _100_PERCENT = new Fraction(_100)\n\nexport class Percent extends Fraction {\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\n\nimport { ChainId, ONE, TradeType, ZERO } from '../constants'\nimport { sortedInsert } from '../utils'\nimport { Currency, ETHER } from './currency'\nimport { CurrencyAmount } from './fractions/currencyAmount'\nimport { Fraction } from './fractions/fraction'\nimport { Percent } from './fractions/percent'\nimport { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport { Pair } from './pair'\nimport { Route } from './route'\nimport { currencyEquals, Token, WETH } from './token'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nfunction computePriceImpact(midPrice: Price, inputAmount: CurrencyAmount, outputAmount: CurrencyAmount): Percent {\n  const exactQuote = midPrice.raw.multiply(inputAmount.raw)\n  // calculate slippage := (exactQuote - outputAmount) / exactQuote\n  const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)\n  return new Percent(slippage.numerator, slippage.denominator)\n}\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput {\n  readonly inputAmount: CurrencyAmount\n  readonly outputAmount: CurrencyAmount\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator(a: InputOutput, b: InputOutput): number {\n  // must have same input and output token for comparison\n  invariant(currencyEquals(a.inputAmount.currency, b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(currencyEquals(a.outputAmount.currency, b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator(a: Trade, b: Trade) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Given a currency amount and a chain ID, returns the equivalent representation as the token amount.\n * In other words, if the currency is ETHER, returns the WETH token amount for the given chain. Otherwise, returns\n * the input currency amount.\n */\nfunction wrappedAmount(currencyAmount: CurrencyAmount, chainId: ChainId): TokenAmount {\n  if (currencyAmount instanceof TokenAmount) return currencyAmount\n  if (currencyAmount.currency === ETHER) return new TokenAmount(WETH[chainId], currencyAmount.raw)\n  invariant(false, 'CURRENCY')\n}\n\nfunction wrappedCurrency(currency: Currency, chainId: ChainId): Token {\n  if (currency instanceof Token) return currency\n  if (currency === ETHER) return WETH[chainId]\n  invariant(false, 'CURRENCY')\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through.\n   */\n  public readonly route: Route\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price\n  /**\n   * The mid price after the trade executes assuming no slippage.\n   */\n  public readonly nextMidPrice: Price\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn(route: Route, amountIn: CurrencyAmount): Trade {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut(route: Route, amountOut: CurrencyAmount): Trade {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(route: Route, amount: CurrencyAmount, tradeType: TradeType) {\n    const amounts: TokenAmount[] = new Array(route.path.length)\n    const nextPairs: Pair[] = new Array(route.pairs.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(currencyEquals(amount.currency, route.input), 'INPUT')\n      amounts[0] = wrappedAmount(amount, route.chainId)\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount, nextPair] = pair.getOutputAmount(amounts[i])\n        amounts[i + 1] = outputAmount\n        nextPairs[i] = nextPair\n      }\n    } else {\n      invariant(currencyEquals(amount.currency, route.output), 'OUTPUT')\n      amounts[amounts.length - 1] = wrappedAmount(amount, route.chainId)\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount, nextPair] = pair.getInputAmount(amounts[i])\n        amounts[i - 1] = inputAmount\n        nextPairs[i - 1] = nextPair\n      }\n    }\n\n    this.route = route\n    this.tradeType = tradeType\n    this.inputAmount =\n      tradeType === TradeType.EXACT_INPUT\n        ? amount\n        : route.input === ETHER\n        ? CurrencyAmount.ether(amounts[0].raw)\n        : amounts[0]\n    this.outputAmount =\n      tradeType === TradeType.EXACT_OUTPUT\n        ? amount\n        : route.output === ETHER\n        ? CurrencyAmount.ether(amounts[amounts.length - 1].raw)\n        : amounts[amounts.length - 1]\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.raw,\n      this.outputAmount.raw\n    )\n    this.nextMidPrice = Price.fromRoute(new Route(nextPairs, route.input))\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.raw).quotient\n      return this.outputAmount instanceof TokenAmount\n        ? new TokenAmount(this.outputAmount.token, slippageAdjustedAmountOut)\n        : CurrencyAmount.ether(slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient\n      return this.inputAmount instanceof TokenAmount\n        ? new TokenAmount(this.inputAmount.token, slippageAdjustedAmountIn)\n        : CurrencyAmount.ether(slippageAdjustedAmountIn)\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactIn(\n    pairs: Pair[],\n    currencyAmountIn: CurrencyAmount,\n    currencyOut: Currency,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountIn: CurrencyAmount = currencyAmountIn,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountIn === currencyAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountIn instanceof TokenAmount\n        ? currencyAmountIn.token.chainId\n        : currencyOut instanceof Token\n        ? currencyOut.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountIn = wrappedAmount(currencyAmountIn, chainId)\n    const tokenOut = wrappedCurrency(currencyOut, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.token) && !pair.token1.equals(amountIn.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: TokenAmount\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.token.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, pair], originalAmountIn.currency, currencyOut),\n            originalAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          amountOut,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentPairs, pair],\n          originalAmountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param currencyAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOut(\n    pairs: Pair[],\n    currencyIn: Currency,\n    currencyAmountOut: CurrencyAmount,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountOut: CurrencyAmount = currencyAmountOut,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountOut === currencyAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountOut instanceof TokenAmount\n        ? currencyAmountOut.token.chainId\n        : currencyIn instanceof Token\n        ? currencyIn.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountOut = wrappedAmount(currencyAmountOut, chainId)\n    const tokenIn = wrappedCurrency(currencyIn, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.token) && !pair.token1.equals(amountOut.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: TokenAmount\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if (error.isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.token.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([pair, ...currentPairs], currencyIn, originalAmountOut.currency),\n            originalAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          currencyIn,\n          amountIn,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [pair, ...currentPairs],\n          originalAmountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n","import { TradeType } from './constants'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from './utils'\nimport { CurrencyAmount, ETHER, Percent, Trade } from './entities'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\n/**\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the Uniswap V2 Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nfunction toHex(currencyAmount: CurrencyAmount) {\n  return `0x${currencyAmount.raw.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(trade: Trade, options: TradeOptions): SwapParameters {\n    const etherIn = trade.inputAmount.currency === ETHER\n    const etherOut = trade.outputAmount.currency === ETHER\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const path: string[] = trade.route.path.map(token => token.address)\n    const deadline = `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = useFeeOnTransfer\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n            : 'swapExactTokensForTokens'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapTokensForExactTokens'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n    }\n    return {\n      methodName,\n      args,\n      value\n    }\n  }\n}\n","import { Contract } from '@ethersproject/contracts'\nimport { getNetwork } from '@ethersproject/networks'\nimport { getDefaultProvider } from '@ethersproject/providers'\nimport { TokenAmount } from './entities/fractions/tokenAmount'\nimport { Pair } from './entities/pair'\nimport IUniswapV2Pair from '@uniswap/v2-core/build/IUniswapV2Pair.json'\nimport invariant from 'tiny-invariant'\nimport ERC20 from './abis/ERC20.json'\nimport { ChainId } from './constants'\nimport { Token } from './entities/token'\n\nlet TOKEN_DECIMALS_CACHE: { [chainId: number]: { [address: string]: number } } = {\n  [ChainId.MAINNET]: {\n    '0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A': 9 // DGD\n  }\n}\n\n/**\n * Contains methods for constructing instances of pairs and tokens from on-chain data.\n */\nexport abstract class Fetcher {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  /**\n   * Fetch information for a given token on the given chain, using the given ethers provider.\n   * @param chainId chain of the token\n   * @param address address of the token on the chain\n   * @param provider provider used to fetch the token\n   * @param symbol optional symbol of the token\n   * @param name optional name of the token\n   */\n  public static async fetchTokenData(\n    chainId: ChainId,\n    address: string,\n    provider = getDefaultProvider(getNetwork(chainId)),\n    symbol?: string,\n    name?: string\n  ): Promise<Token> {\n    const parsedDecimals =\n      typeof TOKEN_DECIMALS_CACHE?.[chainId]?.[address] === 'number'\n        ? TOKEN_DECIMALS_CACHE[chainId][address]\n        : await new Contract(address, ERC20, provider).decimals().then((decimals: number): number => {\n            TOKEN_DECIMALS_CACHE = {\n              ...TOKEN_DECIMALS_CACHE,\n              [chainId]: {\n                ...TOKEN_DECIMALS_CACHE?.[chainId],\n                [address]: decimals\n              }\n            }\n            return decimals\n          })\n    return new Token(chainId, address, parsedDecimals, symbol, name)\n  }\n\n  /**\n   * Fetches information about a pair and constructs a pair from the given two tokens.\n   * @param tokenA first token\n   * @param tokenB second token\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchPairData(\n    tokenA: Token,\n    tokenB: Token,\n    provider = getDefaultProvider(getNetwork(tokenA.chainId))\n  ): Promise<Pair> {\n    invariant(tokenA.chainId === tokenB.chainId, 'CHAIN_ID')\n    const address = Pair.getAddress(tokenA, tokenB)\n    const [reserves0, reserves1] = await new Contract(address, IUniswapV2Pair.abi, provider).getReserves()\n    const balances = tokenA.sortsBefore(tokenB) ? [reserves0, reserves1] : [reserves1, reserves0]\n    return new Pair(new TokenAmount(tokenA, balances[0]), new TokenAmount(tokenB, balances[1]))\n  }\n}\n"]},"metadata":{},"sourceType":"module"}