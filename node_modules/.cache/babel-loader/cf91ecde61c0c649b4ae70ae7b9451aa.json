{"ast":null,"code":"import { ChainId, JSBI, Percent, Token, WETH } from '@uniswap/sdk';\nimport { fortmatic, injected, portis, walletconnect, walletlink } from '../connectors'; // a list of tokens by chain\n\nexport const ROUTER_ADDRESS = '0xd101544cd6e7216b40ca76fb8ea79eb86f7c1fdd';\nexport const DAI = new Token(ChainId.MAINNET, '0x6B175474E89094C44Da98b954EedeAC495271d0F', 18, 'DAI', 'Dai Stablecoin');\nexport const USDC = new Token(ChainId.MAINNET, '0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48', 6, 'USDC', 'USD//C');\nexport const USDT = new Token(ChainId.MAINNET, '0xdAC17F958D2ee523a2206206994597C13D831ec7', 6, 'USDT', 'Tether USD');\nexport const COMP = new Token(ChainId.MAINNET, '0xc00e94Cb662C3520282E6f5717214004A7f26888', 18, 'COMP', 'Compound');\nexport const MKR = new Token(ChainId.MAINNET, '0x9f8F72aA9304c8B593d555F12eF6589cC3A579A2', 18, 'MKR', 'Maker');\nexport const AMPL = new Token(ChainId.MAINNET, '0xD46bA6D942050d489DBd938a2C909A5d5039A161', 9, 'AMPL', 'Ampleforth');\nconst WETH_ONLY = {\n  [ChainId.MAINNET]: [WETH[ChainId.MAINNET]],\n  [ChainId.ROPSTEN]: [WETH[ChainId.ROPSTEN]],\n  [ChainId.RINKEBY]: [WETH[ChainId.RINKEBY]],\n  [ChainId.GÖRLI]: [WETH[ChainId.GÖRLI]],\n  [ChainId.KOVAN]: [WETH[ChainId.KOVAN]],\n  [ChainId.HECO]: [WETH[ChainId.HECO]]\n}; // used to construct intermediary pairs for trading\n\nexport const BASES_TO_CHECK_TRADES_AGAINST = { ...WETH_ONLY,\n  [ChainId.MAINNET]: [...WETH_ONLY[ChainId.MAINNET], DAI, USDC, USDT, COMP, MKR]\n};\n/**\n * Some tokens can only be swapped via certain pairs, so we override the list of bases that are considered for these\n * tokens.\n */\n\nexport const CUSTOM_BASES = {\n  [ChainId.MAINNET]: {\n    [AMPL.address]: [DAI, WETH[ChainId.MAINNET]]\n  }\n}; // used for display in the default list when adding liquidity\n\nexport const SUGGESTED_BASES = { ...WETH_ONLY,\n  [ChainId.MAINNET]: [...WETH_ONLY[ChainId.MAINNET], DAI, USDC, USDT]\n}; // used to construct the list of all pairs we consider by default in the frontend\n\nexport const BASES_TO_TRACK_LIQUIDITY_FOR = { ...WETH_ONLY,\n  [ChainId.MAINNET]: [...WETH_ONLY[ChainId.MAINNET], DAI, USDC, USDT]\n};\nexport const PINNED_PAIRS = {\n  [ChainId.MAINNET]: [[new Token(ChainId.MAINNET, '0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643', 8, 'cDAI', 'Compound Dai'), new Token(ChainId.MAINNET, '0x39AA39c021dfbaE8faC545936693aC917d5E7563', 8, 'cUSDC', 'Compound USD Coin')], [USDC, USDT], [DAI, USDT]]\n};\nexport const SUPPORTED_WALLETS = {\n  INJECTED: {\n    connector: injected,\n    name: 'Injected',\n    iconName: 'arrow-right.svg',\n    description: 'Injected web3 provider.',\n    href: null,\n    color: '#010101',\n    primary: true\n  },\n  METAMASK: {\n    connector: injected,\n    name: 'MetaMask',\n    iconName: 'metamask.png',\n    description: 'Easy-to-use browser extension.',\n    href: null,\n    color: '#E8831D'\n  },\n  WALLET_CONNECT: {\n    connector: walletconnect,\n    name: 'WalletConnect',\n    iconName: 'walletConnectIcon.svg',\n    description: 'Connect to Trust Wallet, Rainbow Wallet and more...',\n    href: null,\n    color: '#4196FC',\n    mobile: true\n  },\n  WALLET_LINK: {\n    connector: walletlink,\n    name: 'Coinbase Wallet',\n    iconName: 'coinbaseWalletIcon.svg',\n    description: 'Use Coinbase Wallet app on mobile device',\n    href: null,\n    color: '#315CF5'\n  },\n  COINBASE_LINK: {\n    name: 'Open in Coinbase Wallet',\n    iconName: 'coinbaseWalletIcon.svg',\n    description: 'Open in Coinbase Wallet app.',\n    href: 'https://go.cb-w.com/mtUDhEZPy1',\n    color: '#315CF5',\n    mobile: true,\n    mobileOnly: true\n  },\n  FORTMATIC: {\n    connector: fortmatic,\n    name: 'Fortmatic',\n    iconName: 'fortmaticIcon.png',\n    description: 'Login using Fortmatic hosted wallet',\n    href: null,\n    color: '#6748FF',\n    mobile: true\n  },\n  Portis: {\n    connector: portis,\n    name: 'Portis',\n    iconName: 'portisIcon.png',\n    description: 'Login using Portis hosted wallet',\n    href: null,\n    color: '#4A6C9B',\n    mobile: true\n  }\n};\nexport const NetworkContextName = 'NETWORK'; // default allowed slippage, in bips\n\nexport const INITIAL_ALLOWED_SLIPPAGE = 50; // 20 minutes, denominated in seconds\n\nexport const DEFAULT_DEADLINE_FROM_NOW = 60 * 20; // one basis point\n\nexport const ONE_BIPS = new Percent(JSBI.BigInt(1), JSBI.BigInt(10000));\nexport const BIPS_BASE = JSBI.BigInt(10000); // used for warning states\n\nexport const ALLOWED_PRICE_IMPACT_LOW = new Percent(JSBI.BigInt(100), BIPS_BASE); // 1%\n\nexport const ALLOWED_PRICE_IMPACT_MEDIUM = new Percent(JSBI.BigInt(300), BIPS_BASE); // 3%\n\nexport const ALLOWED_PRICE_IMPACT_HIGH = new Percent(JSBI.BigInt(500), BIPS_BASE); // 5%\n// if the price slippage exceeds this number, force the user to type 'confirm' to execute\n\nexport const PRICE_IMPACT_WITHOUT_FEE_CONFIRM_MIN = new Percent(JSBI.BigInt(1000), BIPS_BASE); // 10%\n// for non expert mode disable swaps above this\n\nexport const BLOCKED_PRICE_IMPACT_NON_EXPERT = new Percent(JSBI.BigInt(1500), BIPS_BASE); // 15%\n// used to ensure the user doesn't send so much ETH so they end up with <.01\n\nexport const MIN_ETH = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(16)); // .01 ETH\n\nexport const BETTER_TRADE_LINK_THRESHOLD = new Percent(JSBI.BigInt(75), JSBI.BigInt(10000));","map":{"version":3,"sources":["C:/Users/lansen/Desktop/Uniswap-master/uniswap-front-interface/src/constants/index.ts"],"names":["ChainId","JSBI","Percent","Token","WETH","fortmatic","injected","portis","walletconnect","walletlink","ROUTER_ADDRESS","DAI","MAINNET","USDC","USDT","COMP","MKR","AMPL","WETH_ONLY","ROPSTEN","RINKEBY","GÖRLI","KOVAN","HECO","BASES_TO_CHECK_TRADES_AGAINST","CUSTOM_BASES","address","SUGGESTED_BASES","BASES_TO_TRACK_LIQUIDITY_FOR","PINNED_PAIRS","SUPPORTED_WALLETS","INJECTED","connector","name","iconName","description","href","color","primary","METAMASK","WALLET_CONNECT","mobile","WALLET_LINK","COINBASE_LINK","mobileOnly","FORTMATIC","Portis","NetworkContextName","INITIAL_ALLOWED_SLIPPAGE","DEFAULT_DEADLINE_FROM_NOW","ONE_BIPS","BigInt","BIPS_BASE","ALLOWED_PRICE_IMPACT_LOW","ALLOWED_PRICE_IMPACT_MEDIUM","ALLOWED_PRICE_IMPACT_HIGH","PRICE_IMPACT_WITHOUT_FEE_CONFIRM_MIN","BLOCKED_PRICE_IMPACT_NON_EXPERT","MIN_ETH","exponentiate","BETTER_TRADE_LINK_THRESHOLD"],"mappings":"AAAA,SAASA,OAAT,EAAkBC,IAAlB,EAAwBC,OAAxB,EAAiCC,KAAjC,EAAwCC,IAAxC,QAAoD,cAApD;AAGA,SAASC,SAAT,EAAoBC,QAApB,EAA8BC,MAA9B,EAAsCC,aAAtC,EAAqDC,UAArD,QAAuE,eAAvE,C,CAGA;;AAKA,OAAO,MAAMC,cAAc,GAAG,4CAAvB;AACP,OAAO,MAAMC,GAAG,GAAG,IAAIR,KAAJ,CAAUH,OAAO,CAACY,OAAlB,EAA2B,4CAA3B,EAAyE,EAAzE,EAA6E,KAA7E,EAAoF,gBAApF,CAAZ;AACP,OAAO,MAAMC,IAAI,GAAG,IAAIV,KAAJ,CAAUH,OAAO,CAACY,OAAlB,EAA2B,4CAA3B,EAAyE,CAAzE,EAA4E,MAA5E,EAAoF,QAApF,CAAb;AACP,OAAO,MAAME,IAAI,GAAG,IAAIX,KAAJ,CAAUH,OAAO,CAACY,OAAlB,EAA2B,4CAA3B,EAAyE,CAAzE,EAA4E,MAA5E,EAAoF,YAApF,CAAb;AACP,OAAO,MAAMG,IAAI,GAAG,IAAIZ,KAAJ,CAAUH,OAAO,CAACY,OAAlB,EAA2B,4CAA3B,EAAyE,EAAzE,EAA6E,MAA7E,EAAqF,UAArF,CAAb;AACP,OAAO,MAAMI,GAAG,GAAG,IAAIb,KAAJ,CAAUH,OAAO,CAACY,OAAlB,EAA2B,4CAA3B,EAAyE,EAAzE,EAA6E,KAA7E,EAAoF,OAApF,CAAZ;AACP,OAAO,MAAMK,IAAI,GAAG,IAAId,KAAJ,CAAUH,OAAO,CAACY,OAAlB,EAA2B,4CAA3B,EAAyE,CAAzE,EAA4E,MAA5E,EAAoF,YAApF,CAAb;AAEP,MAAMM,SAAyB,GAAG;AAChC,GAAClB,OAAO,CAACY,OAAT,GAAmB,CAACR,IAAI,CAACJ,OAAO,CAACY,OAAT,CAAL,CADa;AAEhC,GAACZ,OAAO,CAACmB,OAAT,GAAmB,CAACf,IAAI,CAACJ,OAAO,CAACmB,OAAT,CAAL,CAFa;AAGhC,GAACnB,OAAO,CAACoB,OAAT,GAAmB,CAAChB,IAAI,CAACJ,OAAO,CAACoB,OAAT,CAAL,CAHa;AAIhC,GAACpB,OAAO,CAACqB,KAAT,GAAiB,CAACjB,IAAI,CAACJ,OAAO,CAACqB,KAAT,CAAL,CAJe;AAKhC,GAACrB,OAAO,CAACsB,KAAT,GAAiB,CAAClB,IAAI,CAACJ,OAAO,CAACsB,KAAT,CAAL,CALe;AAMhC,GAACtB,OAAO,CAACuB,IAAT,GAAgB,CAACnB,IAAI,CAACJ,OAAO,CAACuB,IAAT,CAAL;AANgB,CAAlC,C,CASA;;AACA,OAAO,MAAMC,6BAA6C,GAAG,EAC3D,GAAGN,SADwD;AAE3D,GAAClB,OAAO,CAACY,OAAT,GAAmB,CAAC,GAAGM,SAAS,CAAClB,OAAO,CAACY,OAAT,CAAb,EAAgCD,GAAhC,EAAqCE,IAArC,EAA2CC,IAA3C,EAAiDC,IAAjD,EAAuDC,GAAvD;AAFwC,CAAtD;AAKP;;;;;AAIA,OAAO,MAAMS,YAA4E,GAAG;AAC1F,GAACzB,OAAO,CAACY,OAAT,GAAmB;AACjB,KAACK,IAAI,CAACS,OAAN,GAAgB,CAACf,GAAD,EAAMP,IAAI,CAACJ,OAAO,CAACY,OAAT,CAAV;AADC;AADuE,CAArF,C,CAMP;;AACA,OAAO,MAAMe,eAA+B,GAAG,EAC7C,GAAGT,SAD0C;AAE7C,GAAClB,OAAO,CAACY,OAAT,GAAmB,CAAC,GAAGM,SAAS,CAAClB,OAAO,CAACY,OAAT,CAAb,EAAgCD,GAAhC,EAAqCE,IAArC,EAA2CC,IAA3C;AAF0B,CAAxC,C,CAKP;;AACA,OAAO,MAAMc,4BAA4C,GAAG,EAC1D,GAAGV,SADuD;AAE1D,GAAClB,OAAO,CAACY,OAAT,GAAmB,CAAC,GAAGM,SAAS,CAAClB,OAAO,CAACY,OAAT,CAAb,EAAgCD,GAAhC,EAAqCE,IAArC,EAA2CC,IAA3C;AAFuC,CAArD;AAKP,OAAO,MAAMe,YAAkE,GAAG;AAChF,GAAC7B,OAAO,CAACY,OAAT,GAAmB,CACjB,CACE,IAAIT,KAAJ,CAAUH,OAAO,CAACY,OAAlB,EAA2B,4CAA3B,EAAyE,CAAzE,EAA4E,MAA5E,EAAoF,cAApF,CADF,EAEE,IAAIT,KAAJ,CAAUH,OAAO,CAACY,OAAlB,EAA2B,4CAA3B,EAAyE,CAAzE,EAA4E,OAA5E,EAAqF,mBAArF,CAFF,CADiB,EAKjB,CAACC,IAAD,EAAOC,IAAP,CALiB,EAMjB,CAACH,GAAD,EAAMG,IAAN,CANiB;AAD6D,CAA3E;AAuBP,OAAO,MAAMgB,iBAAgD,GAAG;AAC9DC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,SAAS,EAAE1B,QADH;AAER2B,IAAAA,IAAI,EAAE,UAFE;AAGRC,IAAAA,QAAQ,EAAE,iBAHF;AAIRC,IAAAA,WAAW,EAAE,yBAJL;AAKRC,IAAAA,IAAI,EAAE,IALE;AAMRC,IAAAA,KAAK,EAAE,SANC;AAORC,IAAAA,OAAO,EAAE;AAPD,GADoD;AAU9DC,EAAAA,QAAQ,EAAE;AACRP,IAAAA,SAAS,EAAE1B,QADH;AAER2B,IAAAA,IAAI,EAAE,UAFE;AAGRC,IAAAA,QAAQ,EAAE,cAHF;AAIRC,IAAAA,WAAW,EAAE,gCAJL;AAKRC,IAAAA,IAAI,EAAE,IALE;AAMRC,IAAAA,KAAK,EAAE;AANC,GAVoD;AAkB9DG,EAAAA,cAAc,EAAE;AACdR,IAAAA,SAAS,EAAExB,aADG;AAEdyB,IAAAA,IAAI,EAAE,eAFQ;AAGdC,IAAAA,QAAQ,EAAE,uBAHI;AAIdC,IAAAA,WAAW,EAAE,qDAJC;AAKdC,IAAAA,IAAI,EAAE,IALQ;AAMdC,IAAAA,KAAK,EAAE,SANO;AAOdI,IAAAA,MAAM,EAAE;AAPM,GAlB8C;AA2B9DC,EAAAA,WAAW,EAAE;AACXV,IAAAA,SAAS,EAAEvB,UADA;AAEXwB,IAAAA,IAAI,EAAE,iBAFK;AAGXC,IAAAA,QAAQ,EAAE,wBAHC;AAIXC,IAAAA,WAAW,EAAE,0CAJF;AAKXC,IAAAA,IAAI,EAAE,IALK;AAMXC,IAAAA,KAAK,EAAE;AANI,GA3BiD;AAmC9DM,EAAAA,aAAa,EAAE;AACbV,IAAAA,IAAI,EAAE,yBADO;AAEbC,IAAAA,QAAQ,EAAE,wBAFG;AAGbC,IAAAA,WAAW,EAAE,8BAHA;AAIbC,IAAAA,IAAI,EAAE,gCAJO;AAKbC,IAAAA,KAAK,EAAE,SALM;AAMbI,IAAAA,MAAM,EAAE,IANK;AAObG,IAAAA,UAAU,EAAE;AAPC,GAnC+C;AA4C9DC,EAAAA,SAAS,EAAE;AACTb,IAAAA,SAAS,EAAE3B,SADF;AAET4B,IAAAA,IAAI,EAAE,WAFG;AAGTC,IAAAA,QAAQ,EAAE,mBAHD;AAITC,IAAAA,WAAW,EAAE,qCAJJ;AAKTC,IAAAA,IAAI,EAAE,IALG;AAMTC,IAAAA,KAAK,EAAE,SANE;AAOTI,IAAAA,MAAM,EAAE;AAPC,GA5CmD;AAqD9DK,EAAAA,MAAM,EAAE;AACNd,IAAAA,SAAS,EAAEzB,MADL;AAEN0B,IAAAA,IAAI,EAAE,QAFA;AAGNC,IAAAA,QAAQ,EAAE,gBAHJ;AAINC,IAAAA,WAAW,EAAE,kCAJP;AAKNC,IAAAA,IAAI,EAAE,IALA;AAMNC,IAAAA,KAAK,EAAE,SAND;AAONI,IAAAA,MAAM,EAAE;AAPF;AArDsD,CAAzD;AAgEP,OAAO,MAAMM,kBAAkB,GAAG,SAA3B,C,CAEP;;AACA,OAAO,MAAMC,wBAAwB,GAAG,EAAjC,C,CACP;;AACA,OAAO,MAAMC,yBAAyB,GAAG,KAAK,EAAvC,C,CAEP;;AACA,OAAO,MAAMC,QAAQ,GAAG,IAAIhD,OAAJ,CAAYD,IAAI,CAACkD,MAAL,CAAY,CAAZ,CAAZ,EAA4BlD,IAAI,CAACkD,MAAL,CAAY,KAAZ,CAA5B,CAAjB;AACP,OAAO,MAAMC,SAAS,GAAGnD,IAAI,CAACkD,MAAL,CAAY,KAAZ,CAAlB,C,CACP;;AACA,OAAO,MAAME,wBAAiC,GAAG,IAAInD,OAAJ,CAAYD,IAAI,CAACkD,MAAL,CAAY,GAAZ,CAAZ,EAA8BC,SAA9B,CAA1C,C,CAAmF;;AAC1F,OAAO,MAAME,2BAAoC,GAAG,IAAIpD,OAAJ,CAAYD,IAAI,CAACkD,MAAL,CAAY,GAAZ,CAAZ,EAA8BC,SAA9B,CAA7C,C,CAAsF;;AAC7F,OAAO,MAAMG,yBAAkC,GAAG,IAAIrD,OAAJ,CAAYD,IAAI,CAACkD,MAAL,CAAY,GAAZ,CAAZ,EAA8BC,SAA9B,CAA3C,C,CAAoF;AAC3F;;AACA,OAAO,MAAMI,oCAA6C,GAAG,IAAItD,OAAJ,CAAYD,IAAI,CAACkD,MAAL,CAAY,IAAZ,CAAZ,EAA+BC,SAA/B,CAAtD,C,CAAgG;AACvG;;AACA,OAAO,MAAMK,+BAAwC,GAAG,IAAIvD,OAAJ,CAAYD,IAAI,CAACkD,MAAL,CAAY,IAAZ,CAAZ,EAA+BC,SAA/B,CAAjD,C,CAA2F;AAElG;;AACA,OAAO,MAAMM,OAAa,GAAGzD,IAAI,CAAC0D,YAAL,CAAkB1D,IAAI,CAACkD,MAAL,CAAY,EAAZ,CAAlB,EAAmClD,IAAI,CAACkD,MAAL,CAAY,EAAZ,CAAnC,CAAtB,C,CAA0E;;AACjF,OAAO,MAAMS,2BAA2B,GAAG,IAAI1D,OAAJ,CAAYD,IAAI,CAACkD,MAAL,CAAY,EAAZ,CAAZ,EAA6BlD,IAAI,CAACkD,MAAL,CAAY,KAAZ,CAA7B,CAApC","sourcesContent":["import { ChainId, JSBI, Percent, Token, WETH } from '@uniswap/sdk'\nimport { AbstractConnector } from '@web3-react/abstract-connector'\n\nimport { fortmatic, injected, portis, walletconnect, walletlink } from '../connectors'\n\n\n// a list of tokens by chain\ntype ChainTokenList = {\n  readonly [chainId in ChainId]: Token[]\n}\n\nexport const ROUTER_ADDRESS = '0xd101544cd6e7216b40ca76fb8ea79eb86f7c1fdd'\nexport const DAI = new Token(ChainId.MAINNET, '0x6B175474E89094C44Da98b954EedeAC495271d0F', 18, 'DAI', 'Dai Stablecoin')\nexport const USDC = new Token(ChainId.MAINNET, '0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48', 6, 'USDC', 'USD//C')\nexport const USDT = new Token(ChainId.MAINNET, '0xdAC17F958D2ee523a2206206994597C13D831ec7', 6, 'USDT', 'Tether USD')\nexport const COMP = new Token(ChainId.MAINNET, '0xc00e94Cb662C3520282E6f5717214004A7f26888', 18, 'COMP', 'Compound')\nexport const MKR = new Token(ChainId.MAINNET, '0x9f8F72aA9304c8B593d555F12eF6589cC3A579A2', 18, 'MKR', 'Maker')\nexport const AMPL = new Token(ChainId.MAINNET, '0xD46bA6D942050d489DBd938a2C909A5d5039A161', 9, 'AMPL', 'Ampleforth')\n\nconst WETH_ONLY: ChainTokenList = {\n  [ChainId.MAINNET]: [WETH[ChainId.MAINNET]],\n  [ChainId.ROPSTEN]: [WETH[ChainId.ROPSTEN]],\n  [ChainId.RINKEBY]: [WETH[ChainId.RINKEBY]],\n  [ChainId.GÖRLI]: [WETH[ChainId.GÖRLI]],\n  [ChainId.KOVAN]: [WETH[ChainId.KOVAN]],\n  [ChainId.HECO]: [WETH[ChainId.HECO]]\n}\n\n// used to construct intermediary pairs for trading\nexport const BASES_TO_CHECK_TRADES_AGAINST: ChainTokenList = {\n  ...WETH_ONLY,\n  [ChainId.MAINNET]: [...WETH_ONLY[ChainId.MAINNET], DAI, USDC, USDT, COMP, MKR]\n}\n\n/**\n * Some tokens can only be swapped via certain pairs, so we override the list of bases that are considered for these\n * tokens.\n */\nexport const CUSTOM_BASES: { [chainId in ChainId]?: { [tokenAddress: string]: Token[] } } = {\n  [ChainId.MAINNET]: {\n    [AMPL.address]: [DAI, WETH[ChainId.MAINNET]]\n  }\n}\n\n// used for display in the default list when adding liquidity\nexport const SUGGESTED_BASES: ChainTokenList = {\n  ...WETH_ONLY,\n  [ChainId.MAINNET]: [...WETH_ONLY[ChainId.MAINNET], DAI, USDC, USDT]\n}\n\n// used to construct the list of all pairs we consider by default in the frontend\nexport const BASES_TO_TRACK_LIQUIDITY_FOR: ChainTokenList = {\n  ...WETH_ONLY,\n  [ChainId.MAINNET]: [...WETH_ONLY[ChainId.MAINNET], DAI, USDC, USDT]\n}\n\nexport const PINNED_PAIRS: { readonly [chainId in ChainId]?: [Token, Token][] } = {\n  [ChainId.MAINNET]: [\n    [\n      new Token(ChainId.MAINNET, '0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643', 8, 'cDAI', 'Compound Dai'),\n      new Token(ChainId.MAINNET, '0x39AA39c021dfbaE8faC545936693aC917d5E7563', 8, 'cUSDC', 'Compound USD Coin')\n    ],\n    [USDC, USDT],\n    [DAI, USDT]\n  ]\n}\n\nexport interface WalletInfo {\n  connector?: AbstractConnector\n  name: string\n  iconName: string\n  description: string\n  href: string | null\n  color: string\n  primary?: true\n  mobile?: true\n  mobileOnly?: true\n}\n\nexport const SUPPORTED_WALLETS: { [key: string]: WalletInfo } = {\n  INJECTED: {\n    connector: injected,\n    name: 'Injected',\n    iconName: 'arrow-right.svg',\n    description: 'Injected web3 provider.',\n    href: null,\n    color: '#010101',\n    primary: true\n  },\n  METAMASK: {\n    connector: injected,\n    name: 'MetaMask',\n    iconName: 'metamask.png',\n    description: 'Easy-to-use browser extension.',\n    href: null,\n    color: '#E8831D'\n  },\n  WALLET_CONNECT: {\n    connector: walletconnect,\n    name: 'WalletConnect',\n    iconName: 'walletConnectIcon.svg',\n    description: 'Connect to Trust Wallet, Rainbow Wallet and more...',\n    href: null,\n    color: '#4196FC',\n    mobile: true\n  },\n  WALLET_LINK: {\n    connector: walletlink,\n    name: 'Coinbase Wallet',\n    iconName: 'coinbaseWalletIcon.svg',\n    description: 'Use Coinbase Wallet app on mobile device',\n    href: null,\n    color: '#315CF5'\n  },\n  COINBASE_LINK: {\n    name: 'Open in Coinbase Wallet',\n    iconName: 'coinbaseWalletIcon.svg',\n    description: 'Open in Coinbase Wallet app.',\n    href: 'https://go.cb-w.com/mtUDhEZPy1',\n    color: '#315CF5',\n    mobile: true,\n    mobileOnly: true\n  },\n  FORTMATIC: {\n    connector: fortmatic,\n    name: 'Fortmatic',\n    iconName: 'fortmaticIcon.png',\n    description: 'Login using Fortmatic hosted wallet',\n    href: null,\n    color: '#6748FF',\n    mobile: true\n  },\n  Portis: {\n    connector: portis,\n    name: 'Portis',\n    iconName: 'portisIcon.png',\n    description: 'Login using Portis hosted wallet',\n    href: null,\n    color: '#4A6C9B',\n    mobile: true\n  }\n}\n\nexport const NetworkContextName = 'NETWORK'\n\n// default allowed slippage, in bips\nexport const INITIAL_ALLOWED_SLIPPAGE = 50\n// 20 minutes, denominated in seconds\nexport const DEFAULT_DEADLINE_FROM_NOW = 60 * 20\n\n// one basis point\nexport const ONE_BIPS = new Percent(JSBI.BigInt(1), JSBI.BigInt(10000))\nexport const BIPS_BASE = JSBI.BigInt(10000)\n// used for warning states\nexport const ALLOWED_PRICE_IMPACT_LOW: Percent = new Percent(JSBI.BigInt(100), BIPS_BASE) // 1%\nexport const ALLOWED_PRICE_IMPACT_MEDIUM: Percent = new Percent(JSBI.BigInt(300), BIPS_BASE) // 3%\nexport const ALLOWED_PRICE_IMPACT_HIGH: Percent = new Percent(JSBI.BigInt(500), BIPS_BASE) // 5%\n// if the price slippage exceeds this number, force the user to type 'confirm' to execute\nexport const PRICE_IMPACT_WITHOUT_FEE_CONFIRM_MIN: Percent = new Percent(JSBI.BigInt(1000), BIPS_BASE) // 10%\n// for non expert mode disable swaps above this\nexport const BLOCKED_PRICE_IMPACT_NON_EXPERT: Percent = new Percent(JSBI.BigInt(1500), BIPS_BASE) // 15%\n\n// used to ensure the user doesn't send so much ETH so they end up with <.01\nexport const MIN_ETH: JSBI = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(16)) // .01 ETH\nexport const BETTER_TRADE_LINK_THRESHOLD = new Percent(JSBI.BigInt(75), JSBI.BigInt(10000))\n\n"]},"metadata":{},"sourceType":"module"}