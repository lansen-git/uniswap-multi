{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lansen\\\\Desktop\\\\Uniswap-master\\\\uniswap-front-interface\\\\src\\\\components\\\\WalletModal\\\\index.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport ReactGA from 'react-ga';\nimport styled from 'styled-components';\nimport { isMobile } from 'react-device-detect';\nimport { UnsupportedChainIdError, useWeb3React } from '@web3-react/core';\nimport usePrevious from '../../hooks/usePrevious';\nimport { useWalletModalOpen, useWalletModalToggle } from '../../state/application/hooks';\nimport Modal from '../Modal';\nimport AccountDetails from '../AccountDetails';\nimport PendingView from './PendingView';\nimport Option from './Option';\nimport { SUPPORTED_WALLETS } from '../../constants';\nimport { ExternalLink } from '../../theme';\nimport MetamaskIcon from '../../assets/images/metamask.png';\nimport { ReactComponent as Close } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../assets/images/x.svg\";\nimport { injected, fortmatic, portis } from '../../connectors';\nimport { OVERLAY_READY } from '../../connectors/Fortmatic';\nimport { WalletConnectConnector } from '@web3-react/walletconnect-connector';\nconst CloseIcon = styled.div`\n  position: absolute;\n  right: 1rem;\n  top: 14px;\n  &:hover {\n    cursor: pointer;\n    opacity: 0.6;\n  }\n`;\nconst CloseColor = styled(Close)`\n  path {\n    stroke: ${({\n  theme\n}) => theme.text4};\n  }\n`;\nconst Wrapper = styled.div`\n  ${({\n  theme\n}) => theme.flexColumnNoWrap}\n  margin: 0;\n  padding: 0;\n  width: 100%;\n`;\nconst HeaderRow = styled.div`\n  ${({\n  theme\n}) => theme.flexRowNoWrap};\n  padding: 1rem 1rem;\n  font-weight: 500;\n  color: ${props => props.color === 'blue' ? ({\n  theme\n}) => theme.primary1 : 'inherit'};\n  ${({\n  theme\n}) => theme.mediaWidth.upToMedium`\n    padding: 1rem;\n  `};\n`;\nconst ContentWrapper = styled.div`\n  background-color: ${({\n  theme\n}) => theme.bg2};\n  padding: 2rem;\n  border-bottom-left-radius: 20px;\n  border-bottom-right-radius: 20px;\n\n  ${({\n  theme\n}) => theme.mediaWidth.upToMedium`padding: 1rem`};\n`;\nconst UpperSection = styled.div`\n  position: relative;\n\n  h5 {\n    margin: 0;\n    margin-bottom: 0.5rem;\n    font-size: 1rem;\n    font-weight: 400;\n  }\n\n  h5:last-child {\n    margin-bottom: 0px;\n  }\n\n  h4 {\n    margin-top: 0;\n    font-weight: 500;\n  }\n`;\nconst Blurb = styled.div`\n  ${({\n  theme\n}) => theme.flexRowNoWrap}\n  align-items: center;\n  justify-content: center;\n  flex-wrap: wrap;\n  margin-top: 2rem;\n  ${({\n  theme\n}) => theme.mediaWidth.upToMedium`\n    margin: 1rem;\n    font-size: 12px;\n  `};\n`;\nconst OptionGrid = styled.div`\n  display: grid;\n  grid-gap: 10px;\n  ${({\n  theme\n}) => theme.mediaWidth.upToMedium`\n    grid-template-columns: 1fr;\n    grid-gap: 10px;\n  `};\n`;\nconst HoverText = styled.div`\n  :hover {\n    cursor: pointer;\n  }\n`;\nconst WALLET_VIEWS = {\n  OPTIONS: 'options',\n  OPTIONS_SECONDARY: 'options_secondary',\n  ACCOUNT: 'account',\n  PENDING: 'pending'\n};\nexport default function WalletModal({\n  pendingTransactions,\n  confirmedTransactions,\n  ENSName\n}) {\n  // important that these are destructed from the account-specific web3-react context\n  const {\n    active,\n    account,\n    connector,\n    activate,\n    error\n  } = useWeb3React();\n  const [walletView, setWalletView] = useState(WALLET_VIEWS.ACCOUNT);\n  const [pendingWallet, setPendingWallet] = useState();\n  const [pendingError, setPendingError] = useState();\n  const walletModalOpen = useWalletModalOpen();\n  const toggleWalletModal = useWalletModalToggle();\n  const previousAccount = usePrevious(account); // close on connection, when logged out before\n\n  useEffect(() => {\n    if (account && !previousAccount && walletModalOpen) {\n      toggleWalletModal();\n    }\n  }, [account, previousAccount, toggleWalletModal, walletModalOpen]); // always reset to account view\n\n  useEffect(() => {\n    if (walletModalOpen) {\n      setPendingError(false);\n      setWalletView(WALLET_VIEWS.ACCOUNT);\n    }\n  }, [walletModalOpen]); // close modal when a connection is successful\n\n  const activePrevious = usePrevious(active);\n  const connectorPrevious = usePrevious(connector);\n  useEffect(() => {\n    if (walletModalOpen && (active && !activePrevious || connector && connector !== connectorPrevious && !error)) {\n      setWalletView(WALLET_VIEWS.ACCOUNT);\n    }\n  }, [setWalletView, active, error, connector, walletModalOpen, activePrevious, connectorPrevious]);\n\n  const tryActivation = async connector => {\n    var _connector$walletConn, _connector$walletConn2;\n\n    let name = '';\n    Object.keys(SUPPORTED_WALLETS).map(key => {\n      if (connector === SUPPORTED_WALLETS[key].connector) {\n        return name = SUPPORTED_WALLETS[key].name;\n      }\n\n      return true;\n    }); // log selected wallet\n\n    ReactGA.event({\n      category: 'Wallet',\n      action: 'Change Wallet',\n      label: name\n    });\n    setPendingWallet(connector); // set wallet for pending view\n\n    setWalletView(WALLET_VIEWS.PENDING); // if the connector is walletconnect and the user has already tried to connect, manually reset the connector\n\n    if (connector instanceof WalletConnectConnector && ((_connector$walletConn = connector.walletConnectProvider) === null || _connector$walletConn === void 0 ? void 0 : (_connector$walletConn2 = _connector$walletConn.wc) === null || _connector$walletConn2 === void 0 ? void 0 : _connector$walletConn2.uri)) {\n      connector.walletConnectProvider = undefined;\n    }\n\n    connector && activate(connector, undefined, true).catch(error => {\n      if (error instanceof UnsupportedChainIdError) {\n        activate(connector); // a little janky...can't use setError because the connector isn't set\n      } else {\n        setPendingError(true);\n      }\n    });\n  }; // close wallet modal if fortmatic modal is active\n\n\n  useEffect(() => {\n    fortmatic.on(OVERLAY_READY, () => {\n      toggleWalletModal();\n    });\n  }, [toggleWalletModal]); // get wallets user can switch too, depending on device/browser\n\n  function getOptions() {\n    const isMetamask = window.ethereum && window.ethereum.isMetaMask;\n    return Object.keys(SUPPORTED_WALLETS).map(key => {\n      const option = SUPPORTED_WALLETS[key]; // check for mobile options\n\n      if (isMobile) {\n        //disable portis on mobile for now\n        if (option.connector === portis) {\n          return null;\n        }\n\n        if (!window.web3 && !window.ethereum && option.mobile) {\n          return /*#__PURE__*/React.createElement(Option, {\n            onClick: () => {\n              option.connector !== connector && !option.href && tryActivation(option.connector);\n            },\n            id: `connect-${key}`,\n            key: key,\n            active: option.connector && option.connector === connector,\n            color: option.color,\n            link: option.href,\n            header: option.name,\n            subheader: null,\n            icon: require('../../assets/images/' + option.iconName),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 218,\n              columnNumber: 13\n            }\n          });\n        }\n\n        return null;\n      } // overwrite injected when needed\n\n\n      if (option.connector === injected) {\n        // don't show injected if there's no injected provider\n        if (!(window.web3 || window.ethereum)) {\n          if (option.name === 'MetaMask') {\n            return /*#__PURE__*/React.createElement(Option, {\n              id: `connect-${key}`,\n              key: key,\n              color: '#E8831D',\n              header: 'Install Metamask',\n              subheader: null,\n              link: 'https://metamask.io/',\n              icon: MetamaskIcon,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 242,\n                columnNumber: 15\n              }\n            });\n          } else {\n            return null; //dont want to return install twice\n          }\n        } // don't return metamask if injected provider isn't metamask\n        else if (option.name === 'MetaMask' && !isMetamask) {\n            return null;\n          } // likewise for generic\n          else if (option.name === 'Injected' && isMetamask) {\n              return null;\n            }\n      } // return rest of options\n\n\n      return !isMobile && !option.mobileOnly && /*#__PURE__*/React.createElement(Option, {\n        id: `connect-${key}`,\n        onClick: () => {\n          option.connector === connector ? setWalletView(WALLET_VIEWS.ACCOUNT) : !option.href && tryActivation(option.connector);\n        },\n        key: key,\n        active: option.connector === connector,\n        color: option.color,\n        link: option.href,\n        header: option.name,\n        subheader: null //use option.descriptio to bring back multi-line\n        ,\n        icon: require('../../assets/images/' + option.iconName),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 11\n        }\n      });\n    });\n  }\n\n  function getModalContent() {\n    if (error) {\n      return /*#__PURE__*/React.createElement(UpperSection, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 293,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(CloseIcon, {\n        onClick: toggleWalletModal,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 294,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(CloseColor, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 13\n        }\n      })), /*#__PURE__*/React.createElement(HeaderRow, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 11\n        }\n      }, error instanceof UnsupportedChainIdError ? 'Wrong Network' : 'Error connecting'), /*#__PURE__*/React.createElement(ContentWrapper, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 298,\n          columnNumber: 11\n        }\n      }, error instanceof UnsupportedChainIdError ? /*#__PURE__*/React.createElement(\"h5\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 15\n        }\n      }, \"Please connect to the appropriate Ethereum network.\") : 'Error connecting. Try refreshing the page.'));\n    }\n\n    if (account && walletView === WALLET_VIEWS.ACCOUNT) {\n      return /*#__PURE__*/React.createElement(AccountDetails, {\n        toggleWalletModal: toggleWalletModal,\n        pendingTransactions: pendingTransactions,\n        confirmedTransactions: confirmedTransactions,\n        ENSName: ENSName,\n        openOptions: () => setWalletView(WALLET_VIEWS.OPTIONS),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 310,\n          columnNumber: 9\n        }\n      });\n    }\n\n    return /*#__PURE__*/React.createElement(UpperSection, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(CloseIcon, {\n      onClick: toggleWalletModal,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(CloseColor, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 11\n      }\n    })), walletView !== WALLET_VIEWS.ACCOUNT ? /*#__PURE__*/React.createElement(HeaderRow, {\n      color: \"blue\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(HoverText, {\n      onClick: () => {\n        setPendingError(false);\n        setWalletView(WALLET_VIEWS.ACCOUNT);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 13\n      }\n    }, \"Back\")) : /*#__PURE__*/React.createElement(HeaderRow, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 336,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(HoverText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 13\n      }\n    }, \"Connect to a wallet\")), /*#__PURE__*/React.createElement(ContentWrapper, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 340,\n        columnNumber: 9\n      }\n    }, walletView === WALLET_VIEWS.PENDING ? /*#__PURE__*/React.createElement(PendingView, {\n      connector: pendingWallet,\n      error: pendingError,\n      setPendingError: setPendingError,\n      tryActivation: tryActivation,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 342,\n        columnNumber: 13\n      }\n    }) : /*#__PURE__*/React.createElement(OptionGrid, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 13\n      }\n    }, getOptions()), walletView !== WALLET_VIEWS.PENDING && /*#__PURE__*/React.createElement(Blurb, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 352,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 353,\n        columnNumber: 15\n      }\n    }, \"New to Ethereum? \\xA0\"), ' ', /*#__PURE__*/React.createElement(ExternalLink, {\n      href: \"https://ethereum.org/wallets/\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 354,\n        columnNumber: 15\n      }\n    }, \"Learn more about wallets\"))));\n  }\n\n  return /*#__PURE__*/React.createElement(Modal, {\n    isOpen: walletModalOpen,\n    onDismiss: toggleWalletModal,\n    minHeight: false,\n    maxHeight: 90,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 363,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Wrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 364,\n      columnNumber: 7\n    }\n  }, getModalContent()));\n}","map":{"version":3,"sources":["C:/Users/lansen/Desktop/Uniswap-master/uniswap-front-interface/src/components/WalletModal/index.tsx"],"names":["React","useState","useEffect","ReactGA","styled","isMobile","UnsupportedChainIdError","useWeb3React","usePrevious","useWalletModalOpen","useWalletModalToggle","Modal","AccountDetails","PendingView","Option","SUPPORTED_WALLETS","ExternalLink","MetamaskIcon","injected","fortmatic","portis","OVERLAY_READY","WalletConnectConnector","CloseIcon","div","CloseColor","Close","theme","text4","Wrapper","flexColumnNoWrap","HeaderRow","flexRowNoWrap","props","color","primary1","mediaWidth","upToMedium","ContentWrapper","bg2","UpperSection","Blurb","OptionGrid","HoverText","WALLET_VIEWS","OPTIONS","OPTIONS_SECONDARY","ACCOUNT","PENDING","WalletModal","pendingTransactions","confirmedTransactions","ENSName","active","account","connector","activate","error","walletView","setWalletView","pendingWallet","setPendingWallet","pendingError","setPendingError","walletModalOpen","toggleWalletModal","previousAccount","activePrevious","connectorPrevious","tryActivation","name","Object","keys","map","key","event","category","action","label","walletConnectProvider","wc","uri","undefined","catch","on","getOptions","isMetamask","window","ethereum","isMetaMask","option","web3","mobile","href","require","iconName","mobileOnly","getModalContent"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport ReactGA from 'react-ga'\nimport styled from 'styled-components'\nimport { isMobile } from 'react-device-detect'\nimport { UnsupportedChainIdError, useWeb3React } from '@web3-react/core'\nimport usePrevious from '../../hooks/usePrevious'\nimport { useWalletModalOpen, useWalletModalToggle } from '../../state/application/hooks'\n\nimport Modal from '../Modal'\nimport AccountDetails from '../AccountDetails'\nimport PendingView from './PendingView'\nimport Option from './Option'\nimport { SUPPORTED_WALLETS } from '../../constants'\nimport { ExternalLink } from '../../theme'\nimport MetamaskIcon from '../../assets/images/metamask.png'\nimport { ReactComponent as Close } from '../../assets/images/x.svg'\nimport { injected, fortmatic, portis } from '../../connectors'\nimport { OVERLAY_READY } from '../../connectors/Fortmatic'\nimport { WalletConnectConnector } from '@web3-react/walletconnect-connector'\nimport { AbstractConnector } from '@web3-react/abstract-connector'\n\nconst CloseIcon = styled.div`\n  position: absolute;\n  right: 1rem;\n  top: 14px;\n  &:hover {\n    cursor: pointer;\n    opacity: 0.6;\n  }\n`\n\nconst CloseColor = styled(Close)`\n  path {\n    stroke: ${({ theme }) => theme.text4};\n  }\n`\n\nconst Wrapper = styled.div`\n  ${({ theme }) => theme.flexColumnNoWrap}\n  margin: 0;\n  padding: 0;\n  width: 100%;\n`\n\nconst HeaderRow = styled.div`\n  ${({ theme }) => theme.flexRowNoWrap};\n  padding: 1rem 1rem;\n  font-weight: 500;\n  color: ${props => (props.color === 'blue' ? ({ theme }) => theme.primary1 : 'inherit')};\n  ${({ theme }) => theme.mediaWidth.upToMedium`\n    padding: 1rem;\n  `};\n`\n\nconst ContentWrapper = styled.div`\n  background-color: ${({ theme }) => theme.bg2};\n  padding: 2rem;\n  border-bottom-left-radius: 20px;\n  border-bottom-right-radius: 20px;\n\n  ${({ theme }) => theme.mediaWidth.upToMedium`padding: 1rem`};\n`\n\nconst UpperSection = styled.div`\n  position: relative;\n\n  h5 {\n    margin: 0;\n    margin-bottom: 0.5rem;\n    font-size: 1rem;\n    font-weight: 400;\n  }\n\n  h5:last-child {\n    margin-bottom: 0px;\n  }\n\n  h4 {\n    margin-top: 0;\n    font-weight: 500;\n  }\n`\n\nconst Blurb = styled.div`\n  ${({ theme }) => theme.flexRowNoWrap}\n  align-items: center;\n  justify-content: center;\n  flex-wrap: wrap;\n  margin-top: 2rem;\n  ${({ theme }) => theme.mediaWidth.upToMedium`\n    margin: 1rem;\n    font-size: 12px;\n  `};\n`\n\nconst OptionGrid = styled.div`\n  display: grid;\n  grid-gap: 10px;\n  ${({ theme }) => theme.mediaWidth.upToMedium`\n    grid-template-columns: 1fr;\n    grid-gap: 10px;\n  `};\n`\n\nconst HoverText = styled.div`\n  :hover {\n    cursor: pointer;\n  }\n`\n\nconst WALLET_VIEWS = {\n  OPTIONS: 'options',\n  OPTIONS_SECONDARY: 'options_secondary',\n  ACCOUNT: 'account',\n  PENDING: 'pending'\n}\n\nexport default function WalletModal({\n  pendingTransactions,\n  confirmedTransactions,\n  ENSName\n}: {\n  pendingTransactions: string[] // hashes of pending\n  confirmedTransactions: string[] // hashes of confirmed\n  ENSName?: string\n}) {\n  // important that these are destructed from the account-specific web3-react context\n  const { active, account, connector, activate, error } = useWeb3React()\n\n  const [walletView, setWalletView] = useState(WALLET_VIEWS.ACCOUNT)\n\n  const [pendingWallet, setPendingWallet] = useState<AbstractConnector | undefined>()\n\n  const [pendingError, setPendingError] = useState<boolean>()\n\n  const walletModalOpen = useWalletModalOpen()\n  const toggleWalletModal = useWalletModalToggle()\n\n  const previousAccount = usePrevious(account)\n\n  // close on connection, when logged out before\n  useEffect(() => {\n    if (account && !previousAccount && walletModalOpen) {\n      toggleWalletModal()\n    }\n  }, [account, previousAccount, toggleWalletModal, walletModalOpen])\n\n  // always reset to account view\n  useEffect(() => {\n    if (walletModalOpen) {\n      setPendingError(false)\n      setWalletView(WALLET_VIEWS.ACCOUNT)\n    }\n  }, [walletModalOpen])\n\n  // close modal when a connection is successful\n  const activePrevious = usePrevious(active)\n  const connectorPrevious = usePrevious(connector)\n  useEffect(() => {\n    if (walletModalOpen && ((active && !activePrevious) || (connector && connector !== connectorPrevious && !error))) {\n      setWalletView(WALLET_VIEWS.ACCOUNT)\n    }\n  }, [setWalletView, active, error, connector, walletModalOpen, activePrevious, connectorPrevious])\n\n  const tryActivation = async (connector: AbstractConnector | undefined) => {\n    let name = ''\n    Object.keys(SUPPORTED_WALLETS).map(key => {\n      if (connector === SUPPORTED_WALLETS[key].connector) {\n        return (name = SUPPORTED_WALLETS[key].name)\n      }\n      return true\n    })\n    // log selected wallet\n    ReactGA.event({\n      category: 'Wallet',\n      action: 'Change Wallet',\n      label: name\n    })\n    setPendingWallet(connector) // set wallet for pending view\n    setWalletView(WALLET_VIEWS.PENDING)\n\n    // if the connector is walletconnect and the user has already tried to connect, manually reset the connector\n    if (connector instanceof WalletConnectConnector && connector.walletConnectProvider?.wc?.uri) {\n      connector.walletConnectProvider = undefined\n    }\n\n    connector &&\n      activate(connector, undefined, true).catch(error => {\n        if (error instanceof UnsupportedChainIdError) {\n          activate(connector) // a little janky...can't use setError because the connector isn't set\n        } else {\n          setPendingError(true)\n        }\n      })\n  }\n\n  // close wallet modal if fortmatic modal is active\n  useEffect(() => {\n    fortmatic.on(OVERLAY_READY, () => {\n      toggleWalletModal()\n    })\n  }, [toggleWalletModal])\n\n  // get wallets user can switch too, depending on device/browser\n  function getOptions() {\n    const isMetamask = window.ethereum && window.ethereum.isMetaMask\n    return Object.keys(SUPPORTED_WALLETS).map(key => {\n      const option = SUPPORTED_WALLETS[key]\n      // check for mobile options\n      if (isMobile) {\n        //disable portis on mobile for now\n        if (option.connector === portis) {\n          return null\n        }\n\n        if (!window.web3 && !window.ethereum && option.mobile) {\n          return (\n            <Option\n              onClick={() => {\n                option.connector !== connector && !option.href && tryActivation(option.connector)\n              }}\n              id={`connect-${key}`}\n              key={key}\n              active={option.connector && option.connector === connector}\n              color={option.color}\n              link={option.href}\n              header={option.name}\n              subheader={null}\n              icon={require('../../assets/images/' + option.iconName)}\n            />\n          )\n        }\n        return null\n      }\n\n      // overwrite injected when needed\n      if (option.connector === injected) {\n        // don't show injected if there's no injected provider\n        if (!(window.web3 || window.ethereum)) {\n          if (option.name === 'MetaMask') {\n            return (\n              <Option\n                id={`connect-${key}`}\n                key={key}\n                color={'#E8831D'}\n                header={'Install Metamask'}\n                subheader={null}\n                link={'https://metamask.io/'}\n                icon={MetamaskIcon}\n              />\n            )\n          } else {\n            return null //dont want to return install twice\n          }\n        }\n        // don't return metamask if injected provider isn't metamask\n        else if (option.name === 'MetaMask' && !isMetamask) {\n          return null\n        }\n        // likewise for generic\n        else if (option.name === 'Injected' && isMetamask) {\n          return null\n        }\n      }\n\n      // return rest of options\n      return (\n        !isMobile &&\n        !option.mobileOnly && (\n          <Option\n            id={`connect-${key}`}\n            onClick={() => {\n              option.connector === connector\n                ? setWalletView(WALLET_VIEWS.ACCOUNT)\n                : !option.href && tryActivation(option.connector)\n            }}\n            key={key}\n            active={option.connector === connector}\n            color={option.color}\n            link={option.href}\n            header={option.name}\n            subheader={null} //use option.descriptio to bring back multi-line\n            icon={require('../../assets/images/' + option.iconName)}\n          />\n        )\n      )\n    })\n  }\n\n  function getModalContent() {\n    if (error) {\n      return (\n        <UpperSection>\n          <CloseIcon onClick={toggleWalletModal}>\n            <CloseColor />\n          </CloseIcon>\n          <HeaderRow>{error instanceof UnsupportedChainIdError ? 'Wrong Network' : 'Error connecting'}</HeaderRow>\n          <ContentWrapper>\n            {error instanceof UnsupportedChainIdError ? (\n              <h5>Please connect to the appropriate Ethereum network.</h5>\n            ) : (\n              'Error connecting. Try refreshing the page.'\n            )}\n          </ContentWrapper>\n        </UpperSection>\n      )\n    }\n    if (account && walletView === WALLET_VIEWS.ACCOUNT) {\n      return (\n        <AccountDetails\n          toggleWalletModal={toggleWalletModal}\n          pendingTransactions={pendingTransactions}\n          confirmedTransactions={confirmedTransactions}\n          ENSName={ENSName}\n          openOptions={() => setWalletView(WALLET_VIEWS.OPTIONS)}\n        />\n      )\n    }\n    return (\n      <UpperSection>\n        <CloseIcon onClick={toggleWalletModal}>\n          <CloseColor />\n        </CloseIcon>\n        {walletView !== WALLET_VIEWS.ACCOUNT ? (\n          <HeaderRow color=\"blue\">\n            <HoverText\n              onClick={() => {\n                setPendingError(false)\n                setWalletView(WALLET_VIEWS.ACCOUNT)\n              }}\n            >\n              Back\n            </HoverText>\n          </HeaderRow>\n        ) : (\n          <HeaderRow>\n            <HoverText>Connect to a wallet</HoverText>\n          </HeaderRow>\n        )}\n        <ContentWrapper>\n          {walletView === WALLET_VIEWS.PENDING ? (\n            <PendingView\n              connector={pendingWallet}\n              error={pendingError}\n              setPendingError={setPendingError}\n              tryActivation={tryActivation}\n            />\n          ) : (\n            <OptionGrid>{getOptions()}</OptionGrid>\n          )}\n          {walletView !== WALLET_VIEWS.PENDING && (\n            <Blurb>\n              <span>New to Ethereum? &nbsp;</span>{' '}\n              <ExternalLink href=\"https://ethereum.org/wallets/\">Learn more about wallets</ExternalLink>\n            </Blurb>\n          )}\n        </ContentWrapper>\n      </UpperSection>\n    )\n  }\n\n  return (\n    <Modal isOpen={walletModalOpen} onDismiss={toggleWalletModal} minHeight={false} maxHeight={90}>\n      <Wrapper>{getModalContent()}</Wrapper>\n    </Modal>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}